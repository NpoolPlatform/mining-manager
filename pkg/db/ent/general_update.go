// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/general"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GeneralUpdate is the builder for updating General entities.
type GeneralUpdate struct {
	config
	hooks    []Hook
	mutation *GeneralMutation
}

// Where appends a list predicates to the GeneralUpdate builder.
func (gu *GeneralUpdate) Where(ps ...predicate.General) *GeneralUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GeneralUpdate) SetCreatedAt(u uint32) *GeneralUpdate {
	gu.mutation.ResetCreatedAt()
	gu.mutation.SetCreatedAt(u)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableCreatedAt(u *uint32) *GeneralUpdate {
	if u != nil {
		gu.SetCreatedAt(*u)
	}
	return gu
}

// AddCreatedAt adds u to the "created_at" field.
func (gu *GeneralUpdate) AddCreatedAt(u int32) *GeneralUpdate {
	gu.mutation.AddCreatedAt(u)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GeneralUpdate) SetUpdatedAt(u uint32) *GeneralUpdate {
	gu.mutation.ResetUpdatedAt()
	gu.mutation.SetUpdatedAt(u)
	return gu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (gu *GeneralUpdate) AddUpdatedAt(u int32) *GeneralUpdate {
	gu.mutation.AddUpdatedAt(u)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GeneralUpdate) SetDeletedAt(u uint32) *GeneralUpdate {
	gu.mutation.ResetDeletedAt()
	gu.mutation.SetDeletedAt(u)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableDeletedAt(u *uint32) *GeneralUpdate {
	if u != nil {
		gu.SetDeletedAt(*u)
	}
	return gu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (gu *GeneralUpdate) AddDeletedAt(u int32) *GeneralUpdate {
	gu.mutation.AddDeletedAt(u)
	return gu
}

// SetAppID sets the "app_id" field.
func (gu *GeneralUpdate) SetAppID(u uuid.UUID) *GeneralUpdate {
	gu.mutation.SetAppID(u)
	return gu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableAppID(u *uuid.UUID) *GeneralUpdate {
	if u != nil {
		gu.SetAppID(*u)
	}
	return gu
}

// ClearAppID clears the value of the "app_id" field.
func (gu *GeneralUpdate) ClearAppID() *GeneralUpdate {
	gu.mutation.ClearAppID()
	return gu
}

// SetUserID sets the "user_id" field.
func (gu *GeneralUpdate) SetUserID(u uuid.UUID) *GeneralUpdate {
	gu.mutation.SetUserID(u)
	return gu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableUserID(u *uuid.UUID) *GeneralUpdate {
	if u != nil {
		gu.SetUserID(*u)
	}
	return gu
}

// ClearUserID clears the value of the "user_id" field.
func (gu *GeneralUpdate) ClearUserID() *GeneralUpdate {
	gu.mutation.ClearUserID()
	return gu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gu *GeneralUpdate) SetCoinTypeID(u uuid.UUID) *GeneralUpdate {
	gu.mutation.SetCoinTypeID(u)
	return gu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableCoinTypeID(u *uuid.UUID) *GeneralUpdate {
	if u != nil {
		gu.SetCoinTypeID(*u)
	}
	return gu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (gu *GeneralUpdate) ClearCoinTypeID() *GeneralUpdate {
	gu.mutation.ClearCoinTypeID()
	return gu
}

// SetIncoming sets the "incoming" field.
func (gu *GeneralUpdate) SetIncoming(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.ResetIncoming()
	gu.mutation.SetIncoming(d)
	return gu
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableIncoming(d *decimal.Decimal) *GeneralUpdate {
	if d != nil {
		gu.SetIncoming(*d)
	}
	return gu
}

// AddIncoming adds d to the "incoming" field.
func (gu *GeneralUpdate) AddIncoming(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.AddIncoming(d)
	return gu
}

// ClearIncoming clears the value of the "incoming" field.
func (gu *GeneralUpdate) ClearIncoming() *GeneralUpdate {
	gu.mutation.ClearIncoming()
	return gu
}

// SetLocked sets the "locked" field.
func (gu *GeneralUpdate) SetLocked(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.ResetLocked()
	gu.mutation.SetLocked(d)
	return gu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableLocked(d *decimal.Decimal) *GeneralUpdate {
	if d != nil {
		gu.SetLocked(*d)
	}
	return gu
}

// AddLocked adds d to the "locked" field.
func (gu *GeneralUpdate) AddLocked(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.AddLocked(d)
	return gu
}

// ClearLocked clears the value of the "locked" field.
func (gu *GeneralUpdate) ClearLocked() *GeneralUpdate {
	gu.mutation.ClearLocked()
	return gu
}

// SetOutcoming sets the "outcoming" field.
func (gu *GeneralUpdate) SetOutcoming(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.ResetOutcoming()
	gu.mutation.SetOutcoming(d)
	return gu
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableOutcoming(d *decimal.Decimal) *GeneralUpdate {
	if d != nil {
		gu.SetOutcoming(*d)
	}
	return gu
}

// AddOutcoming adds d to the "outcoming" field.
func (gu *GeneralUpdate) AddOutcoming(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.AddOutcoming(d)
	return gu
}

// ClearOutcoming clears the value of the "outcoming" field.
func (gu *GeneralUpdate) ClearOutcoming() *GeneralUpdate {
	gu.mutation.ClearOutcoming()
	return gu
}

// SetSpendable sets the "spendable" field.
func (gu *GeneralUpdate) SetSpendable(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.ResetSpendable()
	gu.mutation.SetSpendable(d)
	return gu
}

// SetNillableSpendable sets the "spendable" field if the given value is not nil.
func (gu *GeneralUpdate) SetNillableSpendable(d *decimal.Decimal) *GeneralUpdate {
	if d != nil {
		gu.SetSpendable(*d)
	}
	return gu
}

// AddSpendable adds d to the "spendable" field.
func (gu *GeneralUpdate) AddSpendable(d decimal.Decimal) *GeneralUpdate {
	gu.mutation.AddSpendable(d)
	return gu
}

// ClearSpendable clears the value of the "spendable" field.
func (gu *GeneralUpdate) ClearSpendable() *GeneralUpdate {
	gu.mutation.ClearSpendable()
	return gu
}

// Mutation returns the GeneralMutation object of the builder.
func (gu *GeneralUpdate) Mutation() *GeneralMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GeneralUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GeneralUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GeneralUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GeneralUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GeneralUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		if general.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized general.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := general.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (gu *GeneralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   general.Table,
			Columns: general.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: general.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldDeletedAt,
		})
	}
	if value, ok := gu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldDeletedAt,
		})
	}
	if value, ok := gu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldAppID,
		})
	}
	if gu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldAppID,
		})
	}
	if value, ok := gu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldUserID,
		})
	}
	if gu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldUserID,
		})
	}
	if value, ok := gu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldCoinTypeID,
		})
	}
	if gu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldCoinTypeID,
		})
	}
	if value, ok := gu.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldIncoming,
		})
	}
	if value, ok := gu.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldIncoming,
		})
	}
	if gu.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldIncoming,
		})
	}
	if value, ok := gu.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldLocked,
		})
	}
	if value, ok := gu.mutation.AddedLocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldLocked,
		})
	}
	if gu.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldLocked,
		})
	}
	if value, ok := gu.mutation.Outcoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldOutcoming,
		})
	}
	if value, ok := gu.mutation.AddedOutcoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldOutcoming,
		})
	}
	if gu.mutation.OutcomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldOutcoming,
		})
	}
	if value, ok := gu.mutation.Spendable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldSpendable,
		})
	}
	if value, ok := gu.mutation.AddedSpendable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldSpendable,
		})
	}
	if gu.mutation.SpendableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldSpendable,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{general.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GeneralUpdateOne is the builder for updating a single General entity.
type GeneralUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeneralMutation
}

// SetCreatedAt sets the "created_at" field.
func (guo *GeneralUpdateOne) SetCreatedAt(u uint32) *GeneralUpdateOne {
	guo.mutation.ResetCreatedAt()
	guo.mutation.SetCreatedAt(u)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableCreatedAt(u *uint32) *GeneralUpdateOne {
	if u != nil {
		guo.SetCreatedAt(*u)
	}
	return guo
}

// AddCreatedAt adds u to the "created_at" field.
func (guo *GeneralUpdateOne) AddCreatedAt(u int32) *GeneralUpdateOne {
	guo.mutation.AddCreatedAt(u)
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GeneralUpdateOne) SetUpdatedAt(u uint32) *GeneralUpdateOne {
	guo.mutation.ResetUpdatedAt()
	guo.mutation.SetUpdatedAt(u)
	return guo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (guo *GeneralUpdateOne) AddUpdatedAt(u int32) *GeneralUpdateOne {
	guo.mutation.AddUpdatedAt(u)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GeneralUpdateOne) SetDeletedAt(u uint32) *GeneralUpdateOne {
	guo.mutation.ResetDeletedAt()
	guo.mutation.SetDeletedAt(u)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableDeletedAt(u *uint32) *GeneralUpdateOne {
	if u != nil {
		guo.SetDeletedAt(*u)
	}
	return guo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (guo *GeneralUpdateOne) AddDeletedAt(u int32) *GeneralUpdateOne {
	guo.mutation.AddDeletedAt(u)
	return guo
}

// SetAppID sets the "app_id" field.
func (guo *GeneralUpdateOne) SetAppID(u uuid.UUID) *GeneralUpdateOne {
	guo.mutation.SetAppID(u)
	return guo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableAppID(u *uuid.UUID) *GeneralUpdateOne {
	if u != nil {
		guo.SetAppID(*u)
	}
	return guo
}

// ClearAppID clears the value of the "app_id" field.
func (guo *GeneralUpdateOne) ClearAppID() *GeneralUpdateOne {
	guo.mutation.ClearAppID()
	return guo
}

// SetUserID sets the "user_id" field.
func (guo *GeneralUpdateOne) SetUserID(u uuid.UUID) *GeneralUpdateOne {
	guo.mutation.SetUserID(u)
	return guo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableUserID(u *uuid.UUID) *GeneralUpdateOne {
	if u != nil {
		guo.SetUserID(*u)
	}
	return guo
}

// ClearUserID clears the value of the "user_id" field.
func (guo *GeneralUpdateOne) ClearUserID() *GeneralUpdateOne {
	guo.mutation.ClearUserID()
	return guo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (guo *GeneralUpdateOne) SetCoinTypeID(u uuid.UUID) *GeneralUpdateOne {
	guo.mutation.SetCoinTypeID(u)
	return guo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *GeneralUpdateOne {
	if u != nil {
		guo.SetCoinTypeID(*u)
	}
	return guo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (guo *GeneralUpdateOne) ClearCoinTypeID() *GeneralUpdateOne {
	guo.mutation.ClearCoinTypeID()
	return guo
}

// SetIncoming sets the "incoming" field.
func (guo *GeneralUpdateOne) SetIncoming(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.ResetIncoming()
	guo.mutation.SetIncoming(d)
	return guo
}

// SetNillableIncoming sets the "incoming" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableIncoming(d *decimal.Decimal) *GeneralUpdateOne {
	if d != nil {
		guo.SetIncoming(*d)
	}
	return guo
}

// AddIncoming adds d to the "incoming" field.
func (guo *GeneralUpdateOne) AddIncoming(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.AddIncoming(d)
	return guo
}

// ClearIncoming clears the value of the "incoming" field.
func (guo *GeneralUpdateOne) ClearIncoming() *GeneralUpdateOne {
	guo.mutation.ClearIncoming()
	return guo
}

// SetLocked sets the "locked" field.
func (guo *GeneralUpdateOne) SetLocked(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.ResetLocked()
	guo.mutation.SetLocked(d)
	return guo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableLocked(d *decimal.Decimal) *GeneralUpdateOne {
	if d != nil {
		guo.SetLocked(*d)
	}
	return guo
}

// AddLocked adds d to the "locked" field.
func (guo *GeneralUpdateOne) AddLocked(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.AddLocked(d)
	return guo
}

// ClearLocked clears the value of the "locked" field.
func (guo *GeneralUpdateOne) ClearLocked() *GeneralUpdateOne {
	guo.mutation.ClearLocked()
	return guo
}

// SetOutcoming sets the "outcoming" field.
func (guo *GeneralUpdateOne) SetOutcoming(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.ResetOutcoming()
	guo.mutation.SetOutcoming(d)
	return guo
}

// SetNillableOutcoming sets the "outcoming" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableOutcoming(d *decimal.Decimal) *GeneralUpdateOne {
	if d != nil {
		guo.SetOutcoming(*d)
	}
	return guo
}

// AddOutcoming adds d to the "outcoming" field.
func (guo *GeneralUpdateOne) AddOutcoming(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.AddOutcoming(d)
	return guo
}

// ClearOutcoming clears the value of the "outcoming" field.
func (guo *GeneralUpdateOne) ClearOutcoming() *GeneralUpdateOne {
	guo.mutation.ClearOutcoming()
	return guo
}

// SetSpendable sets the "spendable" field.
func (guo *GeneralUpdateOne) SetSpendable(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.ResetSpendable()
	guo.mutation.SetSpendable(d)
	return guo
}

// SetNillableSpendable sets the "spendable" field if the given value is not nil.
func (guo *GeneralUpdateOne) SetNillableSpendable(d *decimal.Decimal) *GeneralUpdateOne {
	if d != nil {
		guo.SetSpendable(*d)
	}
	return guo
}

// AddSpendable adds d to the "spendable" field.
func (guo *GeneralUpdateOne) AddSpendable(d decimal.Decimal) *GeneralUpdateOne {
	guo.mutation.AddSpendable(d)
	return guo
}

// ClearSpendable clears the value of the "spendable" field.
func (guo *GeneralUpdateOne) ClearSpendable() *GeneralUpdateOne {
	guo.mutation.ClearSpendable()
	return guo
}

// Mutation returns the GeneralMutation object of the builder.
func (guo *GeneralUpdateOne) Mutation() *GeneralMutation {
	return guo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GeneralUpdateOne) Select(field string, fields ...string) *GeneralUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated General entity.
func (guo *GeneralUpdateOne) Save(ctx context.Context) (*General, error) {
	var (
		err  error
		node *General
	)
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GeneralUpdateOne) SaveX(ctx context.Context) *General {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GeneralUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GeneralUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GeneralUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		if general.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized general.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := general.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (guo *GeneralUpdateOne) sqlSave(ctx context.Context) (_node *General, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   general.Table,
			Columns: general.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: general.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "General.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, general.FieldID)
		for _, f := range fields {
			if !general.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != general.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldDeletedAt,
		})
	}
	if value, ok := guo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldDeletedAt,
		})
	}
	if value, ok := guo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldAppID,
		})
	}
	if guo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldAppID,
		})
	}
	if value, ok := guo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldUserID,
		})
	}
	if guo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldUserID,
		})
	}
	if value, ok := guo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldCoinTypeID,
		})
	}
	if guo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: general.FieldCoinTypeID,
		})
	}
	if value, ok := guo.mutation.Incoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldIncoming,
		})
	}
	if value, ok := guo.mutation.AddedIncoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldIncoming,
		})
	}
	if guo.mutation.IncomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldIncoming,
		})
	}
	if value, ok := guo.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldLocked,
		})
	}
	if value, ok := guo.mutation.AddedLocked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldLocked,
		})
	}
	if guo.mutation.LockedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldLocked,
		})
	}
	if value, ok := guo.mutation.Outcoming(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldOutcoming,
		})
	}
	if value, ok := guo.mutation.AddedOutcoming(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldOutcoming,
		})
	}
	if guo.mutation.OutcomingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldOutcoming,
		})
	}
	if value, ok := guo.mutation.Spendable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldSpendable,
		})
	}
	if value, ok := guo.mutation.AddedSpendable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: general.FieldSpendable,
		})
	}
	if guo.mutation.SpendableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: general.FieldSpendable,
		})
	}
	_node = &General{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{general.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
