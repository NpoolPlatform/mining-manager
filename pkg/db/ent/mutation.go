// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitdetail"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitgeneral"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitunsold"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProfitDetail  = "ProfitDetail"
	TypeProfitGeneral = "ProfitGeneral"
	TypeProfitUnsold  = "ProfitUnsold"
)

// ProfitDetailMutation represents an operation that mutates the ProfitDetail nodes in the graph.
type ProfitDetailMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	good_id         *uuid.UUID
	coin_type_id    *uuid.UUID
	amount          *decimal.Decimal
	addamount       *decimal.Decimal
	benefit_date    *uint32
	addbenefit_date *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ProfitDetail, error)
	predicates      []predicate.ProfitDetail
}

var _ ent.Mutation = (*ProfitDetailMutation)(nil)

// profitdetailOption allows management of the mutation configuration using functional options.
type profitdetailOption func(*ProfitDetailMutation)

// newProfitDetailMutation creates new mutation for the ProfitDetail entity.
func newProfitDetailMutation(c config, op Op, opts ...profitdetailOption) *ProfitDetailMutation {
	m := &ProfitDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeProfitDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfitDetailID sets the ID field of the mutation.
func withProfitDetailID(id uuid.UUID) profitdetailOption {
	return func(m *ProfitDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *ProfitDetail
		)
		m.oldValue = func(ctx context.Context) (*ProfitDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProfitDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfitDetail sets the old ProfitDetail of the mutation.
func withProfitDetail(node *ProfitDetail) profitdetailOption {
	return func(m *ProfitDetailMutation) {
		m.oldValue = func(context.Context) (*ProfitDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfitDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfitDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProfitDetail entities.
func (m *ProfitDetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfitDetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfitDetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProfitDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfitDetailMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfitDetailMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ProfitDetailMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ProfitDetailMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfitDetailMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfitDetailMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfitDetailMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ProfitDetailMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ProfitDetailMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfitDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProfitDetailMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProfitDetailMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ProfitDetailMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ProfitDetailMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProfitDetailMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *ProfitDetailMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *ProfitDetailMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *ProfitDetailMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[profitdetail.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *ProfitDetailMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[profitdetail.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *ProfitDetailMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, profitdetail.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ProfitDetailMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ProfitDetailMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ProfitDetailMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[profitdetail.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ProfitDetailMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[profitdetail.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ProfitDetailMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, profitdetail.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *ProfitDetailMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *ProfitDetailMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *ProfitDetailMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *ProfitDetailMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *ProfitDetailMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[profitdetail.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *ProfitDetailMutation) AmountCleared() bool {
	_, ok := m.clearedFields[profitdetail.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *ProfitDetailMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, profitdetail.FieldAmount)
}

// SetBenefitDate sets the "benefit_date" field.
func (m *ProfitDetailMutation) SetBenefitDate(u uint32) {
	m.benefit_date = &u
	m.addbenefit_date = nil
}

// BenefitDate returns the value of the "benefit_date" field in the mutation.
func (m *ProfitDetailMutation) BenefitDate() (r uint32, exists bool) {
	v := m.benefit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitDate returns the old "benefit_date" field's value of the ProfitDetail entity.
// If the ProfitDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitDetailMutation) OldBenefitDate(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitDate: %w", err)
	}
	return oldValue.BenefitDate, nil
}

// AddBenefitDate adds u to the "benefit_date" field.
func (m *ProfitDetailMutation) AddBenefitDate(u int32) {
	if m.addbenefit_date != nil {
		*m.addbenefit_date += u
	} else {
		m.addbenefit_date = &u
	}
}

// AddedBenefitDate returns the value that was added to the "benefit_date" field in this mutation.
func (m *ProfitDetailMutation) AddedBenefitDate() (r int32, exists bool) {
	v := m.addbenefit_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (m *ProfitDetailMutation) ClearBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	m.clearedFields[profitdetail.FieldBenefitDate] = struct{}{}
}

// BenefitDateCleared returns if the "benefit_date" field was cleared in this mutation.
func (m *ProfitDetailMutation) BenefitDateCleared() bool {
	_, ok := m.clearedFields[profitdetail.FieldBenefitDate]
	return ok
}

// ResetBenefitDate resets all changes to the "benefit_date" field.
func (m *ProfitDetailMutation) ResetBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	delete(m.clearedFields, profitdetail.FieldBenefitDate)
}

// Where appends a list predicates to the ProfitDetailMutation builder.
func (m *ProfitDetailMutation) Where(ps ...predicate.ProfitDetail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfitDetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProfitDetail).
func (m *ProfitDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfitDetailMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, profitdetail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profitdetail.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, profitdetail.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, profitdetail.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, profitdetail.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, profitdetail.FieldAmount)
	}
	if m.benefit_date != nil {
		fields = append(fields, profitdetail.FieldBenefitDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfitDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profitdetail.FieldCreatedAt:
		return m.CreatedAt()
	case profitdetail.FieldUpdatedAt:
		return m.UpdatedAt()
	case profitdetail.FieldDeletedAt:
		return m.DeletedAt()
	case profitdetail.FieldGoodID:
		return m.GoodID()
	case profitdetail.FieldCoinTypeID:
		return m.CoinTypeID()
	case profitdetail.FieldAmount:
		return m.Amount()
	case profitdetail.FieldBenefitDate:
		return m.BenefitDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfitDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profitdetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profitdetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case profitdetail.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case profitdetail.FieldGoodID:
		return m.OldGoodID(ctx)
	case profitdetail.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case profitdetail.FieldAmount:
		return m.OldAmount(ctx)
	case profitdetail.FieldBenefitDate:
		return m.OldBenefitDate(ctx)
	}
	return nil, fmt.Errorf("unknown ProfitDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profitdetail.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profitdetail.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case profitdetail.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case profitdetail.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case profitdetail.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case profitdetail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case profitdetail.FieldBenefitDate:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfitDetailMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, profitdetail.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, profitdetail.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, profitdetail.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, profitdetail.FieldAmount)
	}
	if m.addbenefit_date != nil {
		fields = append(fields, profitdetail.FieldBenefitDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfitDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profitdetail.FieldCreatedAt:
		return m.AddedCreatedAt()
	case profitdetail.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case profitdetail.FieldDeletedAt:
		return m.AddedDeletedAt()
	case profitdetail.FieldAmount:
		return m.AddedAmount()
	case profitdetail.FieldBenefitDate:
		return m.AddedBenefitDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profitdetail.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case profitdetail.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case profitdetail.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case profitdetail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case profitdetail.FieldBenefitDate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfitDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profitdetail.FieldGoodID) {
		fields = append(fields, profitdetail.FieldGoodID)
	}
	if m.FieldCleared(profitdetail.FieldCoinTypeID) {
		fields = append(fields, profitdetail.FieldCoinTypeID)
	}
	if m.FieldCleared(profitdetail.FieldAmount) {
		fields = append(fields, profitdetail.FieldAmount)
	}
	if m.FieldCleared(profitdetail.FieldBenefitDate) {
		fields = append(fields, profitdetail.FieldBenefitDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfitDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfitDetailMutation) ClearField(name string) error {
	switch name {
	case profitdetail.FieldGoodID:
		m.ClearGoodID()
		return nil
	case profitdetail.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case profitdetail.FieldAmount:
		m.ClearAmount()
		return nil
	case profitdetail.FieldBenefitDate:
		m.ClearBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown ProfitDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfitDetailMutation) ResetField(name string) error {
	switch name {
	case profitdetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profitdetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case profitdetail.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case profitdetail.FieldGoodID:
		m.ResetGoodID()
		return nil
	case profitdetail.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case profitdetail.FieldAmount:
		m.ResetAmount()
		return nil
	case profitdetail.FieldBenefitDate:
		m.ResetBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown ProfitDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfitDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfitDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfitDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfitDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfitDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfitDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfitDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProfitDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfitDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProfitDetail edge %s", name)
}

// ProfitGeneralMutation represents an operation that mutates the ProfitGeneral nodes in the graph.
type ProfitGeneralMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	created_at                 *uint32
	addcreated_at              *int32
	updated_at                 *uint32
	addupdated_at              *int32
	deleted_at                 *uint32
	adddeleted_at              *int32
	good_id                    *uuid.UUID
	coin_type_id               *uuid.UUID
	amount                     *decimal.Decimal
	addamount                  *decimal.Decimal
	to_platform                *decimal.Decimal
	addto_platform             *decimal.Decimal
	to_user                    *decimal.Decimal
	addto_user                 *decimal.Decimal
	transferred_to_platform    *decimal.Decimal
	addtransferred_to_platform *decimal.Decimal
	transferred_to_user        *decimal.Decimal
	addtransferred_to_user     *decimal.Decimal
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*ProfitGeneral, error)
	predicates                 []predicate.ProfitGeneral
}

var _ ent.Mutation = (*ProfitGeneralMutation)(nil)

// profitgeneralOption allows management of the mutation configuration using functional options.
type profitgeneralOption func(*ProfitGeneralMutation)

// newProfitGeneralMutation creates new mutation for the ProfitGeneral entity.
func newProfitGeneralMutation(c config, op Op, opts ...profitgeneralOption) *ProfitGeneralMutation {
	m := &ProfitGeneralMutation{
		config:        c,
		op:            op,
		typ:           TypeProfitGeneral,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfitGeneralID sets the ID field of the mutation.
func withProfitGeneralID(id uuid.UUID) profitgeneralOption {
	return func(m *ProfitGeneralMutation) {
		var (
			err   error
			once  sync.Once
			value *ProfitGeneral
		)
		m.oldValue = func(ctx context.Context) (*ProfitGeneral, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProfitGeneral.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfitGeneral sets the old ProfitGeneral of the mutation.
func withProfitGeneral(node *ProfitGeneral) profitgeneralOption {
	return func(m *ProfitGeneralMutation) {
		m.oldValue = func(context.Context) (*ProfitGeneral, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfitGeneralMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfitGeneralMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProfitGeneral entities.
func (m *ProfitGeneralMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfitGeneralMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfitGeneralMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProfitGeneral.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfitGeneralMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfitGeneralMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ProfitGeneralMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ProfitGeneralMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfitGeneralMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfitGeneralMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfitGeneralMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ProfitGeneralMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ProfitGeneralMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfitGeneralMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProfitGeneralMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProfitGeneralMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ProfitGeneralMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ProfitGeneralMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProfitGeneralMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *ProfitGeneralMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *ProfitGeneralMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *ProfitGeneralMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[profitgeneral.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *ProfitGeneralMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *ProfitGeneralMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, profitgeneral.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ProfitGeneralMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ProfitGeneralMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ProfitGeneralMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[profitgeneral.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ProfitGeneralMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ProfitGeneralMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, profitgeneral.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *ProfitGeneralMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *ProfitGeneralMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *ProfitGeneralMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *ProfitGeneralMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *ProfitGeneralMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[profitgeneral.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *ProfitGeneralMutation) AmountCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *ProfitGeneralMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, profitgeneral.FieldAmount)
}

// SetToPlatform sets the "to_platform" field.
func (m *ProfitGeneralMutation) SetToPlatform(d decimal.Decimal) {
	m.to_platform = &d
	m.addto_platform = nil
}

// ToPlatform returns the value of the "to_platform" field in the mutation.
func (m *ProfitGeneralMutation) ToPlatform() (r decimal.Decimal, exists bool) {
	v := m.to_platform
	if v == nil {
		return
	}
	return *v, true
}

// OldToPlatform returns the old "to_platform" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldToPlatform(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToPlatform: %w", err)
	}
	return oldValue.ToPlatform, nil
}

// AddToPlatform adds d to the "to_platform" field.
func (m *ProfitGeneralMutation) AddToPlatform(d decimal.Decimal) {
	if m.addto_platform != nil {
		*m.addto_platform = m.addto_platform.Add(d)
	} else {
		m.addto_platform = &d
	}
}

// AddedToPlatform returns the value that was added to the "to_platform" field in this mutation.
func (m *ProfitGeneralMutation) AddedToPlatform() (r decimal.Decimal, exists bool) {
	v := m.addto_platform
	if v == nil {
		return
	}
	return *v, true
}

// ClearToPlatform clears the value of the "to_platform" field.
func (m *ProfitGeneralMutation) ClearToPlatform() {
	m.to_platform = nil
	m.addto_platform = nil
	m.clearedFields[profitgeneral.FieldToPlatform] = struct{}{}
}

// ToPlatformCleared returns if the "to_platform" field was cleared in this mutation.
func (m *ProfitGeneralMutation) ToPlatformCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldToPlatform]
	return ok
}

// ResetToPlatform resets all changes to the "to_platform" field.
func (m *ProfitGeneralMutation) ResetToPlatform() {
	m.to_platform = nil
	m.addto_platform = nil
	delete(m.clearedFields, profitgeneral.FieldToPlatform)
}

// SetToUser sets the "to_user" field.
func (m *ProfitGeneralMutation) SetToUser(d decimal.Decimal) {
	m.to_user = &d
	m.addto_user = nil
}

// ToUser returns the value of the "to_user" field in the mutation.
func (m *ProfitGeneralMutation) ToUser() (r decimal.Decimal, exists bool) {
	v := m.to_user
	if v == nil {
		return
	}
	return *v, true
}

// OldToUser returns the old "to_user" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldToUser(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToUser: %w", err)
	}
	return oldValue.ToUser, nil
}

// AddToUser adds d to the "to_user" field.
func (m *ProfitGeneralMutation) AddToUser(d decimal.Decimal) {
	if m.addto_user != nil {
		*m.addto_user = m.addto_user.Add(d)
	} else {
		m.addto_user = &d
	}
}

// AddedToUser returns the value that was added to the "to_user" field in this mutation.
func (m *ProfitGeneralMutation) AddedToUser() (r decimal.Decimal, exists bool) {
	v := m.addto_user
	if v == nil {
		return
	}
	return *v, true
}

// ClearToUser clears the value of the "to_user" field.
func (m *ProfitGeneralMutation) ClearToUser() {
	m.to_user = nil
	m.addto_user = nil
	m.clearedFields[profitgeneral.FieldToUser] = struct{}{}
}

// ToUserCleared returns if the "to_user" field was cleared in this mutation.
func (m *ProfitGeneralMutation) ToUserCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldToUser]
	return ok
}

// ResetToUser resets all changes to the "to_user" field.
func (m *ProfitGeneralMutation) ResetToUser() {
	m.to_user = nil
	m.addto_user = nil
	delete(m.clearedFields, profitgeneral.FieldToUser)
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (m *ProfitGeneralMutation) SetTransferredToPlatform(d decimal.Decimal) {
	m.transferred_to_platform = &d
	m.addtransferred_to_platform = nil
}

// TransferredToPlatform returns the value of the "transferred_to_platform" field in the mutation.
func (m *ProfitGeneralMutation) TransferredToPlatform() (r decimal.Decimal, exists bool) {
	v := m.transferred_to_platform
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferredToPlatform returns the old "transferred_to_platform" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldTransferredToPlatform(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferredToPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferredToPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferredToPlatform: %w", err)
	}
	return oldValue.TransferredToPlatform, nil
}

// AddTransferredToPlatform adds d to the "transferred_to_platform" field.
func (m *ProfitGeneralMutation) AddTransferredToPlatform(d decimal.Decimal) {
	if m.addtransferred_to_platform != nil {
		*m.addtransferred_to_platform = m.addtransferred_to_platform.Add(d)
	} else {
		m.addtransferred_to_platform = &d
	}
}

// AddedTransferredToPlatform returns the value that was added to the "transferred_to_platform" field in this mutation.
func (m *ProfitGeneralMutation) AddedTransferredToPlatform() (r decimal.Decimal, exists bool) {
	v := m.addtransferred_to_platform
	if v == nil {
		return
	}
	return *v, true
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (m *ProfitGeneralMutation) ClearTransferredToPlatform() {
	m.transferred_to_platform = nil
	m.addtransferred_to_platform = nil
	m.clearedFields[profitgeneral.FieldTransferredToPlatform] = struct{}{}
}

// TransferredToPlatformCleared returns if the "transferred_to_platform" field was cleared in this mutation.
func (m *ProfitGeneralMutation) TransferredToPlatformCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldTransferredToPlatform]
	return ok
}

// ResetTransferredToPlatform resets all changes to the "transferred_to_platform" field.
func (m *ProfitGeneralMutation) ResetTransferredToPlatform() {
	m.transferred_to_platform = nil
	m.addtransferred_to_platform = nil
	delete(m.clearedFields, profitgeneral.FieldTransferredToPlatform)
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (m *ProfitGeneralMutation) SetTransferredToUser(d decimal.Decimal) {
	m.transferred_to_user = &d
	m.addtransferred_to_user = nil
}

// TransferredToUser returns the value of the "transferred_to_user" field in the mutation.
func (m *ProfitGeneralMutation) TransferredToUser() (r decimal.Decimal, exists bool) {
	v := m.transferred_to_user
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferredToUser returns the old "transferred_to_user" field's value of the ProfitGeneral entity.
// If the ProfitGeneral object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitGeneralMutation) OldTransferredToUser(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferredToUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferredToUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferredToUser: %w", err)
	}
	return oldValue.TransferredToUser, nil
}

// AddTransferredToUser adds d to the "transferred_to_user" field.
func (m *ProfitGeneralMutation) AddTransferredToUser(d decimal.Decimal) {
	if m.addtransferred_to_user != nil {
		*m.addtransferred_to_user = m.addtransferred_to_user.Add(d)
	} else {
		m.addtransferred_to_user = &d
	}
}

// AddedTransferredToUser returns the value that was added to the "transferred_to_user" field in this mutation.
func (m *ProfitGeneralMutation) AddedTransferredToUser() (r decimal.Decimal, exists bool) {
	v := m.addtransferred_to_user
	if v == nil {
		return
	}
	return *v, true
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (m *ProfitGeneralMutation) ClearTransferredToUser() {
	m.transferred_to_user = nil
	m.addtransferred_to_user = nil
	m.clearedFields[profitgeneral.FieldTransferredToUser] = struct{}{}
}

// TransferredToUserCleared returns if the "transferred_to_user" field was cleared in this mutation.
func (m *ProfitGeneralMutation) TransferredToUserCleared() bool {
	_, ok := m.clearedFields[profitgeneral.FieldTransferredToUser]
	return ok
}

// ResetTransferredToUser resets all changes to the "transferred_to_user" field.
func (m *ProfitGeneralMutation) ResetTransferredToUser() {
	m.transferred_to_user = nil
	m.addtransferred_to_user = nil
	delete(m.clearedFields, profitgeneral.FieldTransferredToUser)
}

// Where appends a list predicates to the ProfitGeneralMutation builder.
func (m *ProfitGeneralMutation) Where(ps ...predicate.ProfitGeneral) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfitGeneralMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProfitGeneral).
func (m *ProfitGeneralMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfitGeneralMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, profitgeneral.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profitgeneral.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, profitgeneral.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, profitgeneral.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, profitgeneral.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, profitgeneral.FieldAmount)
	}
	if m.to_platform != nil {
		fields = append(fields, profitgeneral.FieldToPlatform)
	}
	if m.to_user != nil {
		fields = append(fields, profitgeneral.FieldToUser)
	}
	if m.transferred_to_platform != nil {
		fields = append(fields, profitgeneral.FieldTransferredToPlatform)
	}
	if m.transferred_to_user != nil {
		fields = append(fields, profitgeneral.FieldTransferredToUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfitGeneralMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profitgeneral.FieldCreatedAt:
		return m.CreatedAt()
	case profitgeneral.FieldUpdatedAt:
		return m.UpdatedAt()
	case profitgeneral.FieldDeletedAt:
		return m.DeletedAt()
	case profitgeneral.FieldGoodID:
		return m.GoodID()
	case profitgeneral.FieldCoinTypeID:
		return m.CoinTypeID()
	case profitgeneral.FieldAmount:
		return m.Amount()
	case profitgeneral.FieldToPlatform:
		return m.ToPlatform()
	case profitgeneral.FieldToUser:
		return m.ToUser()
	case profitgeneral.FieldTransferredToPlatform:
		return m.TransferredToPlatform()
	case profitgeneral.FieldTransferredToUser:
		return m.TransferredToUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfitGeneralMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profitgeneral.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profitgeneral.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case profitgeneral.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case profitgeneral.FieldGoodID:
		return m.OldGoodID(ctx)
	case profitgeneral.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case profitgeneral.FieldAmount:
		return m.OldAmount(ctx)
	case profitgeneral.FieldToPlatform:
		return m.OldToPlatform(ctx)
	case profitgeneral.FieldToUser:
		return m.OldToUser(ctx)
	case profitgeneral.FieldTransferredToPlatform:
		return m.OldTransferredToPlatform(ctx)
	case profitgeneral.FieldTransferredToUser:
		return m.OldTransferredToUser(ctx)
	}
	return nil, fmt.Errorf("unknown ProfitGeneral field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitGeneralMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profitgeneral.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profitgeneral.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case profitgeneral.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case profitgeneral.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case profitgeneral.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case profitgeneral.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case profitgeneral.FieldToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToPlatform(v)
		return nil
	case profitgeneral.FieldToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToUser(v)
		return nil
	case profitgeneral.FieldTransferredToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferredToPlatform(v)
		return nil
	case profitgeneral.FieldTransferredToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferredToUser(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitGeneral field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfitGeneralMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, profitgeneral.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, profitgeneral.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, profitgeneral.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, profitgeneral.FieldAmount)
	}
	if m.addto_platform != nil {
		fields = append(fields, profitgeneral.FieldToPlatform)
	}
	if m.addto_user != nil {
		fields = append(fields, profitgeneral.FieldToUser)
	}
	if m.addtransferred_to_platform != nil {
		fields = append(fields, profitgeneral.FieldTransferredToPlatform)
	}
	if m.addtransferred_to_user != nil {
		fields = append(fields, profitgeneral.FieldTransferredToUser)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfitGeneralMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profitgeneral.FieldCreatedAt:
		return m.AddedCreatedAt()
	case profitgeneral.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case profitgeneral.FieldDeletedAt:
		return m.AddedDeletedAt()
	case profitgeneral.FieldAmount:
		return m.AddedAmount()
	case profitgeneral.FieldToPlatform:
		return m.AddedToPlatform()
	case profitgeneral.FieldToUser:
		return m.AddedToUser()
	case profitgeneral.FieldTransferredToPlatform:
		return m.AddedTransferredToPlatform()
	case profitgeneral.FieldTransferredToUser:
		return m.AddedTransferredToUser()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitGeneralMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profitgeneral.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case profitgeneral.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case profitgeneral.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case profitgeneral.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case profitgeneral.FieldToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToPlatform(v)
		return nil
	case profitgeneral.FieldToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToUser(v)
		return nil
	case profitgeneral.FieldTransferredToPlatform:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransferredToPlatform(v)
		return nil
	case profitgeneral.FieldTransferredToUser:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransferredToUser(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitGeneral numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfitGeneralMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profitgeneral.FieldGoodID) {
		fields = append(fields, profitgeneral.FieldGoodID)
	}
	if m.FieldCleared(profitgeneral.FieldCoinTypeID) {
		fields = append(fields, profitgeneral.FieldCoinTypeID)
	}
	if m.FieldCleared(profitgeneral.FieldAmount) {
		fields = append(fields, profitgeneral.FieldAmount)
	}
	if m.FieldCleared(profitgeneral.FieldToPlatform) {
		fields = append(fields, profitgeneral.FieldToPlatform)
	}
	if m.FieldCleared(profitgeneral.FieldToUser) {
		fields = append(fields, profitgeneral.FieldToUser)
	}
	if m.FieldCleared(profitgeneral.FieldTransferredToPlatform) {
		fields = append(fields, profitgeneral.FieldTransferredToPlatform)
	}
	if m.FieldCleared(profitgeneral.FieldTransferredToUser) {
		fields = append(fields, profitgeneral.FieldTransferredToUser)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfitGeneralMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfitGeneralMutation) ClearField(name string) error {
	switch name {
	case profitgeneral.FieldGoodID:
		m.ClearGoodID()
		return nil
	case profitgeneral.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case profitgeneral.FieldAmount:
		m.ClearAmount()
		return nil
	case profitgeneral.FieldToPlatform:
		m.ClearToPlatform()
		return nil
	case profitgeneral.FieldToUser:
		m.ClearToUser()
		return nil
	case profitgeneral.FieldTransferredToPlatform:
		m.ClearTransferredToPlatform()
		return nil
	case profitgeneral.FieldTransferredToUser:
		m.ClearTransferredToUser()
		return nil
	}
	return fmt.Errorf("unknown ProfitGeneral nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfitGeneralMutation) ResetField(name string) error {
	switch name {
	case profitgeneral.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profitgeneral.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case profitgeneral.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case profitgeneral.FieldGoodID:
		m.ResetGoodID()
		return nil
	case profitgeneral.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case profitgeneral.FieldAmount:
		m.ResetAmount()
		return nil
	case profitgeneral.FieldToPlatform:
		m.ResetToPlatform()
		return nil
	case profitgeneral.FieldToUser:
		m.ResetToUser()
		return nil
	case profitgeneral.FieldTransferredToPlatform:
		m.ResetTransferredToPlatform()
		return nil
	case profitgeneral.FieldTransferredToUser:
		m.ResetTransferredToUser()
		return nil
	}
	return fmt.Errorf("unknown ProfitGeneral field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfitGeneralMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfitGeneralMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfitGeneralMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfitGeneralMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfitGeneralMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfitGeneralMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfitGeneralMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProfitGeneral unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfitGeneralMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProfitGeneral edge %s", name)
}

// ProfitUnsoldMutation represents an operation that mutates the ProfitUnsold nodes in the graph.
type ProfitUnsoldMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	good_id         *uuid.UUID
	coin_type_id    *uuid.UUID
	amount          *decimal.Decimal
	addamount       *decimal.Decimal
	benefit_date    *uint32
	addbenefit_date *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ProfitUnsold, error)
	predicates      []predicate.ProfitUnsold
}

var _ ent.Mutation = (*ProfitUnsoldMutation)(nil)

// profitunsoldOption allows management of the mutation configuration using functional options.
type profitunsoldOption func(*ProfitUnsoldMutation)

// newProfitUnsoldMutation creates new mutation for the ProfitUnsold entity.
func newProfitUnsoldMutation(c config, op Op, opts ...profitunsoldOption) *ProfitUnsoldMutation {
	m := &ProfitUnsoldMutation{
		config:        c,
		op:            op,
		typ:           TypeProfitUnsold,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfitUnsoldID sets the ID field of the mutation.
func withProfitUnsoldID(id uuid.UUID) profitunsoldOption {
	return func(m *ProfitUnsoldMutation) {
		var (
			err   error
			once  sync.Once
			value *ProfitUnsold
		)
		m.oldValue = func(ctx context.Context) (*ProfitUnsold, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProfitUnsold.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfitUnsold sets the old ProfitUnsold of the mutation.
func withProfitUnsold(node *ProfitUnsold) profitunsoldOption {
	return func(m *ProfitUnsoldMutation) {
		m.oldValue = func(context.Context) (*ProfitUnsold, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfitUnsoldMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfitUnsoldMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProfitUnsold entities.
func (m *ProfitUnsoldMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfitUnsoldMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfitUnsoldMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProfitUnsold.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfitUnsoldMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfitUnsoldMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ProfitUnsoldMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ProfitUnsoldMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfitUnsoldMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfitUnsoldMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfitUnsoldMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ProfitUnsoldMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ProfitUnsoldMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfitUnsoldMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProfitUnsoldMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProfitUnsoldMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ProfitUnsoldMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ProfitUnsoldMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProfitUnsoldMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *ProfitUnsoldMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *ProfitUnsoldMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *ProfitUnsoldMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[profitunsold.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *ProfitUnsoldMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[profitunsold.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *ProfitUnsoldMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, profitunsold.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *ProfitUnsoldMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *ProfitUnsoldMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *ProfitUnsoldMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[profitunsold.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *ProfitUnsoldMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[profitunsold.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *ProfitUnsoldMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, profitunsold.FieldCoinTypeID)
}

// SetAmount sets the "amount" field.
func (m *ProfitUnsoldMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *ProfitUnsoldMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds d to the "amount" field.
func (m *ProfitUnsoldMutation) AddAmount(d decimal.Decimal) {
	if m.addamount != nil {
		*m.addamount = m.addamount.Add(d)
	} else {
		m.addamount = &d
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *ProfitUnsoldMutation) AddedAmount() (r decimal.Decimal, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *ProfitUnsoldMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[profitunsold.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *ProfitUnsoldMutation) AmountCleared() bool {
	_, ok := m.clearedFields[profitunsold.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *ProfitUnsoldMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, profitunsold.FieldAmount)
}

// SetBenefitDate sets the "benefit_date" field.
func (m *ProfitUnsoldMutation) SetBenefitDate(u uint32) {
	m.benefit_date = &u
	m.addbenefit_date = nil
}

// BenefitDate returns the value of the "benefit_date" field in the mutation.
func (m *ProfitUnsoldMutation) BenefitDate() (r uint32, exists bool) {
	v := m.benefit_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitDate returns the old "benefit_date" field's value of the ProfitUnsold entity.
// If the ProfitUnsold object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfitUnsoldMutation) OldBenefitDate(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitDate: %w", err)
	}
	return oldValue.BenefitDate, nil
}

// AddBenefitDate adds u to the "benefit_date" field.
func (m *ProfitUnsoldMutation) AddBenefitDate(u int32) {
	if m.addbenefit_date != nil {
		*m.addbenefit_date += u
	} else {
		m.addbenefit_date = &u
	}
}

// AddedBenefitDate returns the value that was added to the "benefit_date" field in this mutation.
func (m *ProfitUnsoldMutation) AddedBenefitDate() (r int32, exists bool) {
	v := m.addbenefit_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (m *ProfitUnsoldMutation) ClearBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	m.clearedFields[profitunsold.FieldBenefitDate] = struct{}{}
}

// BenefitDateCleared returns if the "benefit_date" field was cleared in this mutation.
func (m *ProfitUnsoldMutation) BenefitDateCleared() bool {
	_, ok := m.clearedFields[profitunsold.FieldBenefitDate]
	return ok
}

// ResetBenefitDate resets all changes to the "benefit_date" field.
func (m *ProfitUnsoldMutation) ResetBenefitDate() {
	m.benefit_date = nil
	m.addbenefit_date = nil
	delete(m.clearedFields, profitunsold.FieldBenefitDate)
}

// Where appends a list predicates to the ProfitUnsoldMutation builder.
func (m *ProfitUnsoldMutation) Where(ps ...predicate.ProfitUnsold) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfitUnsoldMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProfitUnsold).
func (m *ProfitUnsoldMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfitUnsoldMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, profitunsold.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profitunsold.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, profitunsold.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, profitunsold.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, profitunsold.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, profitunsold.FieldAmount)
	}
	if m.benefit_date != nil {
		fields = append(fields, profitunsold.FieldBenefitDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfitUnsoldMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profitunsold.FieldCreatedAt:
		return m.CreatedAt()
	case profitunsold.FieldUpdatedAt:
		return m.UpdatedAt()
	case profitunsold.FieldDeletedAt:
		return m.DeletedAt()
	case profitunsold.FieldGoodID:
		return m.GoodID()
	case profitunsold.FieldCoinTypeID:
		return m.CoinTypeID()
	case profitunsold.FieldAmount:
		return m.Amount()
	case profitunsold.FieldBenefitDate:
		return m.BenefitDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfitUnsoldMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profitunsold.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profitunsold.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case profitunsold.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case profitunsold.FieldGoodID:
		return m.OldGoodID(ctx)
	case profitunsold.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case profitunsold.FieldAmount:
		return m.OldAmount(ctx)
	case profitunsold.FieldBenefitDate:
		return m.OldBenefitDate(ctx)
	}
	return nil, fmt.Errorf("unknown ProfitUnsold field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitUnsoldMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profitunsold.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profitunsold.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case profitunsold.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case profitunsold.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case profitunsold.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case profitunsold.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case profitunsold.FieldBenefitDate:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitUnsold field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfitUnsoldMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, profitunsold.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, profitunsold.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, profitunsold.FieldDeletedAt)
	}
	if m.addamount != nil {
		fields = append(fields, profitunsold.FieldAmount)
	}
	if m.addbenefit_date != nil {
		fields = append(fields, profitunsold.FieldBenefitDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfitUnsoldMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profitunsold.FieldCreatedAt:
		return m.AddedCreatedAt()
	case profitunsold.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case profitunsold.FieldDeletedAt:
		return m.AddedDeletedAt()
	case profitunsold.FieldAmount:
		return m.AddedAmount()
	case profitunsold.FieldBenefitDate:
		return m.AddedBenefitDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfitUnsoldMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profitunsold.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case profitunsold.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case profitunsold.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case profitunsold.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case profitunsold.FieldBenefitDate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitDate(v)
		return nil
	}
	return fmt.Errorf("unknown ProfitUnsold numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfitUnsoldMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profitunsold.FieldGoodID) {
		fields = append(fields, profitunsold.FieldGoodID)
	}
	if m.FieldCleared(profitunsold.FieldCoinTypeID) {
		fields = append(fields, profitunsold.FieldCoinTypeID)
	}
	if m.FieldCleared(profitunsold.FieldAmount) {
		fields = append(fields, profitunsold.FieldAmount)
	}
	if m.FieldCleared(profitunsold.FieldBenefitDate) {
		fields = append(fields, profitunsold.FieldBenefitDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfitUnsoldMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfitUnsoldMutation) ClearField(name string) error {
	switch name {
	case profitunsold.FieldGoodID:
		m.ClearGoodID()
		return nil
	case profitunsold.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case profitunsold.FieldAmount:
		m.ClearAmount()
		return nil
	case profitunsold.FieldBenefitDate:
		m.ClearBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown ProfitUnsold nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfitUnsoldMutation) ResetField(name string) error {
	switch name {
	case profitunsold.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profitunsold.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case profitunsold.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case profitunsold.FieldGoodID:
		m.ResetGoodID()
		return nil
	case profitunsold.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case profitunsold.FieldAmount:
		m.ResetAmount()
		return nil
	case profitunsold.FieldBenefitDate:
		m.ResetBenefitDate()
		return nil
	}
	return fmt.Errorf("unknown ProfitUnsold field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfitUnsoldMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfitUnsoldMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfitUnsoldMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfitUnsoldMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfitUnsoldMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfitUnsoldMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfitUnsoldMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProfitUnsold unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfitUnsoldMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProfitUnsold edge %s", name)
}
