// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitgeneral"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitGeneralCreate is the builder for creating a ProfitGeneral entity.
type ProfitGeneralCreate struct {
	config
	mutation *ProfitGeneralMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pgc *ProfitGeneralCreate) SetCreatedAt(u uint32) *ProfitGeneralCreate {
	pgc.mutation.SetCreatedAt(u)
	return pgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableCreatedAt(u *uint32) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetCreatedAt(*u)
	}
	return pgc
}

// SetUpdatedAt sets the "updated_at" field.
func (pgc *ProfitGeneralCreate) SetUpdatedAt(u uint32) *ProfitGeneralCreate {
	pgc.mutation.SetUpdatedAt(u)
	return pgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableUpdatedAt(u *uint32) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetUpdatedAt(*u)
	}
	return pgc
}

// SetDeletedAt sets the "deleted_at" field.
func (pgc *ProfitGeneralCreate) SetDeletedAt(u uint32) *ProfitGeneralCreate {
	pgc.mutation.SetDeletedAt(u)
	return pgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableDeletedAt(u *uint32) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetDeletedAt(*u)
	}
	return pgc
}

// SetGoodID sets the "good_id" field.
func (pgc *ProfitGeneralCreate) SetGoodID(u uuid.UUID) *ProfitGeneralCreate {
	pgc.mutation.SetGoodID(u)
	return pgc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableGoodID(u *uuid.UUID) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetGoodID(*u)
	}
	return pgc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pgc *ProfitGeneralCreate) SetCoinTypeID(u uuid.UUID) *ProfitGeneralCreate {
	pgc.mutation.SetCoinTypeID(u)
	return pgc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetCoinTypeID(*u)
	}
	return pgc
}

// SetAmount sets the "amount" field.
func (pgc *ProfitGeneralCreate) SetAmount(d decimal.Decimal) *ProfitGeneralCreate {
	pgc.mutation.SetAmount(d)
	return pgc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableAmount(d *decimal.Decimal) *ProfitGeneralCreate {
	if d != nil {
		pgc.SetAmount(*d)
	}
	return pgc
}

// SetToPlatform sets the "to_platform" field.
func (pgc *ProfitGeneralCreate) SetToPlatform(d decimal.Decimal) *ProfitGeneralCreate {
	pgc.mutation.SetToPlatform(d)
	return pgc
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableToPlatform(d *decimal.Decimal) *ProfitGeneralCreate {
	if d != nil {
		pgc.SetToPlatform(*d)
	}
	return pgc
}

// SetToUser sets the "to_user" field.
func (pgc *ProfitGeneralCreate) SetToUser(d decimal.Decimal) *ProfitGeneralCreate {
	pgc.mutation.SetToUser(d)
	return pgc
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableToUser(d *decimal.Decimal) *ProfitGeneralCreate {
	if d != nil {
		pgc.SetToUser(*d)
	}
	return pgc
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (pgc *ProfitGeneralCreate) SetTransferredToPlatform(d decimal.Decimal) *ProfitGeneralCreate {
	pgc.mutation.SetTransferredToPlatform(d)
	return pgc
}

// SetNillableTransferredToPlatform sets the "transferred_to_platform" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableTransferredToPlatform(d *decimal.Decimal) *ProfitGeneralCreate {
	if d != nil {
		pgc.SetTransferredToPlatform(*d)
	}
	return pgc
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (pgc *ProfitGeneralCreate) SetTransferredToUser(d decimal.Decimal) *ProfitGeneralCreate {
	pgc.mutation.SetTransferredToUser(d)
	return pgc
}

// SetNillableTransferredToUser sets the "transferred_to_user" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableTransferredToUser(d *decimal.Decimal) *ProfitGeneralCreate {
	if d != nil {
		pgc.SetTransferredToUser(*d)
	}
	return pgc
}

// SetID sets the "id" field.
func (pgc *ProfitGeneralCreate) SetID(u uuid.UUID) *ProfitGeneralCreate {
	pgc.mutation.SetID(u)
	return pgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pgc *ProfitGeneralCreate) SetNillableID(u *uuid.UUID) *ProfitGeneralCreate {
	if u != nil {
		pgc.SetID(*u)
	}
	return pgc
}

// Mutation returns the ProfitGeneralMutation object of the builder.
func (pgc *ProfitGeneralCreate) Mutation() *ProfitGeneralMutation {
	return pgc.mutation
}

// Save creates the ProfitGeneral in the database.
func (pgc *ProfitGeneralCreate) Save(ctx context.Context) (*ProfitGeneral, error) {
	var (
		err  error
		node *ProfitGeneral
	)
	if err := pgc.defaults(); err != nil {
		return nil, err
	}
	if len(pgc.hooks) == 0 {
		if err = pgc.check(); err != nil {
			return nil, err
		}
		node, err = pgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgc.check(); err != nil {
				return nil, err
			}
			pgc.mutation = mutation
			if node, err = pgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pgc.hooks) - 1; i >= 0; i-- {
			if pgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *ProfitGeneralCreate) SaveX(ctx context.Context) *ProfitGeneral {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *ProfitGeneralCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *ProfitGeneralCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgc *ProfitGeneralCreate) defaults() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		if profitgeneral.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultCreatedAt()
		pgc.mutation.SetCreatedAt(v)
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		if profitgeneral.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultUpdatedAt()
		pgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pgc.mutation.DeletedAt(); !ok {
		if profitgeneral.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultDeletedAt()
		pgc.mutation.SetDeletedAt(v)
	}
	if _, ok := pgc.mutation.GoodID(); !ok {
		if profitgeneral.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultGoodID()
		pgc.mutation.SetGoodID(v)
	}
	if _, ok := pgc.mutation.CoinTypeID(); !ok {
		if profitgeneral.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultCoinTypeID()
		pgc.mutation.SetCoinTypeID(v)
	}
	if _, ok := pgc.mutation.ID(); !ok {
		if profitgeneral.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.DefaultID (forgotten import ent/runtime?)")
		}
		v := profitgeneral.DefaultID()
		pgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pgc *ProfitGeneralCreate) check() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProfitGeneral.created_at"`)}
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProfitGeneral.updated_at"`)}
	}
	if _, ok := pgc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ProfitGeneral.deleted_at"`)}
	}
	return nil
}

func (pgc *ProfitGeneralCreate) sqlSave(ctx context.Context) (*ProfitGeneral, error) {
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pgc *ProfitGeneralCreate) createSpec() (*ProfitGeneral, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfitGeneral{config: pgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profitgeneral.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitgeneral.FieldID,
			},
		}
	)
	_spec.OnConflict = pgc.conflict
	if id, ok := pgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pgc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pgc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := pgc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := pgc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pgc.mutation.ToPlatform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToPlatform,
		})
		_node.ToPlatform = value
	}
	if value, ok := pgc.mutation.ToUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToUser,
		})
		_node.ToUser = value
	}
	if value, ok := pgc.mutation.TransferredToPlatform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
		_node.TransferredToPlatform = value
	}
	if value, ok := pgc.mutation.TransferredToUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToUser,
		})
		_node.TransferredToUser = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProfitGeneral.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfitGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pgc *ProfitGeneralCreate) OnConflict(opts ...sql.ConflictOption) *ProfitGeneralUpsertOne {
	pgc.conflict = opts
	return &ProfitGeneralUpsertOne{
		create: pgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProfitGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pgc *ProfitGeneralCreate) OnConflictColumns(columns ...string) *ProfitGeneralUpsertOne {
	pgc.conflict = append(pgc.conflict, sql.ConflictColumns(columns...))
	return &ProfitGeneralUpsertOne{
		create: pgc,
	}
}

type (
	// ProfitGeneralUpsertOne is the builder for "upsert"-ing
	//  one ProfitGeneral node.
	ProfitGeneralUpsertOne struct {
		create *ProfitGeneralCreate
	}

	// ProfitGeneralUpsert is the "OnConflict" setter.
	ProfitGeneralUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ProfitGeneralUpsert) SetCreatedAt(v uint32) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateCreatedAt() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitGeneralUpsert) AddCreatedAt(v uint32) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitGeneralUpsert) SetUpdatedAt(v uint32) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateUpdatedAt() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitGeneralUpsert) AddUpdatedAt(v uint32) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitGeneralUpsert) SetDeletedAt(v uint32) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateDeletedAt() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitGeneralUpsert) AddDeletedAt(v uint32) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *ProfitGeneralUpsert) SetGoodID(v uuid.UUID) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateGoodID() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitGeneralUpsert) ClearGoodID() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitGeneralUpsert) SetCoinTypeID(v uuid.UUID) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateCoinTypeID() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitGeneralUpsert) ClearCoinTypeID() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *ProfitGeneralUpsert) SetAmount(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateAmount() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *ProfitGeneralUpsert) AddAmount(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitGeneralUpsert) ClearAmount() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldAmount)
	return u
}

// SetToPlatform sets the "to_platform" field.
func (u *ProfitGeneralUpsert) SetToPlatform(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldToPlatform, v)
	return u
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateToPlatform() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldToPlatform)
	return u
}

// AddToPlatform adds v to the "to_platform" field.
func (u *ProfitGeneralUpsert) AddToPlatform(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldToPlatform, v)
	return u
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *ProfitGeneralUpsert) ClearToPlatform() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldToPlatform)
	return u
}

// SetToUser sets the "to_user" field.
func (u *ProfitGeneralUpsert) SetToUser(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldToUser, v)
	return u
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateToUser() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldToUser)
	return u
}

// AddToUser adds v to the "to_user" field.
func (u *ProfitGeneralUpsert) AddToUser(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldToUser, v)
	return u
}

// ClearToUser clears the value of the "to_user" field.
func (u *ProfitGeneralUpsert) ClearToUser() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldToUser)
	return u
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (u *ProfitGeneralUpsert) SetTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldTransferredToPlatform, v)
	return u
}

// UpdateTransferredToPlatform sets the "transferred_to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateTransferredToPlatform() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldTransferredToPlatform)
	return u
}

// AddTransferredToPlatform adds v to the "transferred_to_platform" field.
func (u *ProfitGeneralUpsert) AddTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldTransferredToPlatform, v)
	return u
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (u *ProfitGeneralUpsert) ClearTransferredToPlatform() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldTransferredToPlatform)
	return u
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (u *ProfitGeneralUpsert) SetTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Set(profitgeneral.FieldTransferredToUser, v)
	return u
}

// UpdateTransferredToUser sets the "transferred_to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsert) UpdateTransferredToUser() *ProfitGeneralUpsert {
	u.SetExcluded(profitgeneral.FieldTransferredToUser)
	return u
}

// AddTransferredToUser adds v to the "transferred_to_user" field.
func (u *ProfitGeneralUpsert) AddTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsert {
	u.Add(profitgeneral.FieldTransferredToUser, v)
	return u
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (u *ProfitGeneralUpsert) ClearTransferredToUser() *ProfitGeneralUpsert {
	u.SetNull(profitgeneral.FieldTransferredToUser)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProfitGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(profitgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProfitGeneralUpsertOne) UpdateNewValues() *ProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(profitgeneral.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ProfitGeneral.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProfitGeneralUpsertOne) Ignore() *ProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfitGeneralUpsertOne) DoNothing() *ProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfitGeneralCreate.OnConflict
// documentation for more info.
func (u *ProfitGeneralUpsertOne) Update(set func(*ProfitGeneralUpsert)) *ProfitGeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfitGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProfitGeneralUpsertOne) SetCreatedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitGeneralUpsertOne) AddCreatedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateCreatedAt() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitGeneralUpsertOne) SetUpdatedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitGeneralUpsertOne) AddUpdatedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateUpdatedAt() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitGeneralUpsertOne) SetDeletedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitGeneralUpsertOne) AddDeletedAt(v uint32) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateDeletedAt() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ProfitGeneralUpsertOne) SetGoodID(v uuid.UUID) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateGoodID() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitGeneralUpsertOne) ClearGoodID() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitGeneralUpsertOne) SetCoinTypeID(v uuid.UUID) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateCoinTypeID() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitGeneralUpsertOne) ClearCoinTypeID() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *ProfitGeneralUpsertOne) SetAmount(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ProfitGeneralUpsertOne) AddAmount(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateAmount() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitGeneralUpsertOne) ClearAmount() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *ProfitGeneralUpsertOne) SetToPlatform(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *ProfitGeneralUpsertOne) AddToPlatform(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateToPlatform() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *ProfitGeneralUpsertOne) ClearToPlatform() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *ProfitGeneralUpsertOne) SetToUser(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *ProfitGeneralUpsertOne) AddToUser(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateToUser() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *ProfitGeneralUpsertOne) ClearToUser() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearToUser()
	})
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertOne) SetTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetTransferredToPlatform(v)
	})
}

// AddTransferredToPlatform adds v to the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertOne) AddTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddTransferredToPlatform(v)
	})
}

// UpdateTransferredToPlatform sets the "transferred_to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateTransferredToPlatform() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateTransferredToPlatform()
	})
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertOne) ClearTransferredToPlatform() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearTransferredToPlatform()
	})
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (u *ProfitGeneralUpsertOne) SetTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetTransferredToUser(v)
	})
}

// AddTransferredToUser adds v to the "transferred_to_user" field.
func (u *ProfitGeneralUpsertOne) AddTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddTransferredToUser(v)
	})
}

// UpdateTransferredToUser sets the "transferred_to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsertOne) UpdateTransferredToUser() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateTransferredToUser()
	})
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (u *ProfitGeneralUpsertOne) ClearTransferredToUser() *ProfitGeneralUpsertOne {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearTransferredToUser()
	})
}

// Exec executes the query.
func (u *ProfitGeneralUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfitGeneralCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfitGeneralUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProfitGeneralUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProfitGeneralUpsertOne.ID is not supported by MySQL driver. Use ProfitGeneralUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProfitGeneralUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProfitGeneralCreateBulk is the builder for creating many ProfitGeneral entities in bulk.
type ProfitGeneralCreateBulk struct {
	config
	builders []*ProfitGeneralCreate
	conflict []sql.ConflictOption
}

// Save creates the ProfitGeneral entities in the database.
func (pgcb *ProfitGeneralCreateBulk) Save(ctx context.Context) ([]*ProfitGeneral, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*ProfitGeneral, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfitGeneralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *ProfitGeneralCreateBulk) SaveX(ctx context.Context) []*ProfitGeneral {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *ProfitGeneralCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *ProfitGeneralCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProfitGeneral.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfitGeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pgcb *ProfitGeneralCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProfitGeneralUpsertBulk {
	pgcb.conflict = opts
	return &ProfitGeneralUpsertBulk{
		create: pgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProfitGeneral.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pgcb *ProfitGeneralCreateBulk) OnConflictColumns(columns ...string) *ProfitGeneralUpsertBulk {
	pgcb.conflict = append(pgcb.conflict, sql.ConflictColumns(columns...))
	return &ProfitGeneralUpsertBulk{
		create: pgcb,
	}
}

// ProfitGeneralUpsertBulk is the builder for "upsert"-ing
// a bulk of ProfitGeneral nodes.
type ProfitGeneralUpsertBulk struct {
	create *ProfitGeneralCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProfitGeneral.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(profitgeneral.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProfitGeneralUpsertBulk) UpdateNewValues() *ProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(profitgeneral.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProfitGeneral.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProfitGeneralUpsertBulk) Ignore() *ProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfitGeneralUpsertBulk) DoNothing() *ProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfitGeneralCreateBulk.OnConflict
// documentation for more info.
func (u *ProfitGeneralUpsertBulk) Update(set func(*ProfitGeneralUpsert)) *ProfitGeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfitGeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProfitGeneralUpsertBulk) SetCreatedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitGeneralUpsertBulk) AddCreatedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateCreatedAt() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitGeneralUpsertBulk) SetUpdatedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitGeneralUpsertBulk) AddUpdatedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateUpdatedAt() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitGeneralUpsertBulk) SetDeletedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitGeneralUpsertBulk) AddDeletedAt(v uint32) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateDeletedAt() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ProfitGeneralUpsertBulk) SetGoodID(v uuid.UUID) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateGoodID() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitGeneralUpsertBulk) ClearGoodID() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitGeneralUpsertBulk) SetCoinTypeID(v uuid.UUID) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateCoinTypeID() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitGeneralUpsertBulk) ClearCoinTypeID() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *ProfitGeneralUpsertBulk) SetAmount(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ProfitGeneralUpsertBulk) AddAmount(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateAmount() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitGeneralUpsertBulk) ClearAmount() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearAmount()
	})
}

// SetToPlatform sets the "to_platform" field.
func (u *ProfitGeneralUpsertBulk) SetToPlatform(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetToPlatform(v)
	})
}

// AddToPlatform adds v to the "to_platform" field.
func (u *ProfitGeneralUpsertBulk) AddToPlatform(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddToPlatform(v)
	})
}

// UpdateToPlatform sets the "to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateToPlatform() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateToPlatform()
	})
}

// ClearToPlatform clears the value of the "to_platform" field.
func (u *ProfitGeneralUpsertBulk) ClearToPlatform() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearToPlatform()
	})
}

// SetToUser sets the "to_user" field.
func (u *ProfitGeneralUpsertBulk) SetToUser(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetToUser(v)
	})
}

// AddToUser adds v to the "to_user" field.
func (u *ProfitGeneralUpsertBulk) AddToUser(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddToUser(v)
	})
}

// UpdateToUser sets the "to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateToUser() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateToUser()
	})
}

// ClearToUser clears the value of the "to_user" field.
func (u *ProfitGeneralUpsertBulk) ClearToUser() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearToUser()
	})
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertBulk) SetTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetTransferredToPlatform(v)
	})
}

// AddTransferredToPlatform adds v to the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertBulk) AddTransferredToPlatform(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddTransferredToPlatform(v)
	})
}

// UpdateTransferredToPlatform sets the "transferred_to_platform" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateTransferredToPlatform() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateTransferredToPlatform()
	})
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (u *ProfitGeneralUpsertBulk) ClearTransferredToPlatform() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearTransferredToPlatform()
	})
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (u *ProfitGeneralUpsertBulk) SetTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.SetTransferredToUser(v)
	})
}

// AddTransferredToUser adds v to the "transferred_to_user" field.
func (u *ProfitGeneralUpsertBulk) AddTransferredToUser(v decimal.Decimal) *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.AddTransferredToUser(v)
	})
}

// UpdateTransferredToUser sets the "transferred_to_user" field to the value that was provided on create.
func (u *ProfitGeneralUpsertBulk) UpdateTransferredToUser() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.UpdateTransferredToUser()
	})
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (u *ProfitGeneralUpsertBulk) ClearTransferredToUser() *ProfitGeneralUpsertBulk {
	return u.Update(func(s *ProfitGeneralUpsert) {
		s.ClearTransferredToUser()
	})
}

// Exec executes the query.
func (u *ProfitGeneralUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProfitGeneralCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfitGeneralCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfitGeneralUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
