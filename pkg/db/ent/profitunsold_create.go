// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitunsold"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitUnsoldCreate is the builder for creating a ProfitUnsold entity.
type ProfitUnsoldCreate struct {
	config
	mutation *ProfitUnsoldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (puc *ProfitUnsoldCreate) SetCreatedAt(u uint32) *ProfitUnsoldCreate {
	puc.mutation.SetCreatedAt(u)
	return puc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableCreatedAt(u *uint32) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetCreatedAt(*u)
	}
	return puc
}

// SetUpdatedAt sets the "updated_at" field.
func (puc *ProfitUnsoldCreate) SetUpdatedAt(u uint32) *ProfitUnsoldCreate {
	puc.mutation.SetUpdatedAt(u)
	return puc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableUpdatedAt(u *uint32) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetUpdatedAt(*u)
	}
	return puc
}

// SetDeletedAt sets the "deleted_at" field.
func (puc *ProfitUnsoldCreate) SetDeletedAt(u uint32) *ProfitUnsoldCreate {
	puc.mutation.SetDeletedAt(u)
	return puc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableDeletedAt(u *uint32) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetDeletedAt(*u)
	}
	return puc
}

// SetGoodID sets the "good_id" field.
func (puc *ProfitUnsoldCreate) SetGoodID(u uuid.UUID) *ProfitUnsoldCreate {
	puc.mutation.SetGoodID(u)
	return puc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableGoodID(u *uuid.UUID) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetGoodID(*u)
	}
	return puc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (puc *ProfitUnsoldCreate) SetCoinTypeID(u uuid.UUID) *ProfitUnsoldCreate {
	puc.mutation.SetCoinTypeID(u)
	return puc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetCoinTypeID(*u)
	}
	return puc
}

// SetAmount sets the "amount" field.
func (puc *ProfitUnsoldCreate) SetAmount(d decimal.Decimal) *ProfitUnsoldCreate {
	puc.mutation.SetAmount(d)
	return puc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableAmount(d *decimal.Decimal) *ProfitUnsoldCreate {
	if d != nil {
		puc.SetAmount(*d)
	}
	return puc
}

// SetBenefitDate sets the "benefit_date" field.
func (puc *ProfitUnsoldCreate) SetBenefitDate(u uint32) *ProfitUnsoldCreate {
	puc.mutation.SetBenefitDate(u)
	return puc
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableBenefitDate(u *uint32) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetBenefitDate(*u)
	}
	return puc
}

// SetID sets the "id" field.
func (puc *ProfitUnsoldCreate) SetID(u uuid.UUID) *ProfitUnsoldCreate {
	puc.mutation.SetID(u)
	return puc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (puc *ProfitUnsoldCreate) SetNillableID(u *uuid.UUID) *ProfitUnsoldCreate {
	if u != nil {
		puc.SetID(*u)
	}
	return puc
}

// Mutation returns the ProfitUnsoldMutation object of the builder.
func (puc *ProfitUnsoldCreate) Mutation() *ProfitUnsoldMutation {
	return puc.mutation
}

// Save creates the ProfitUnsold in the database.
func (puc *ProfitUnsoldCreate) Save(ctx context.Context) (*ProfitUnsold, error) {
	var (
		err  error
		node *ProfitUnsold
	)
	if err := puc.defaults(); err != nil {
		return nil, err
	}
	if len(puc.hooks) == 0 {
		if err = puc.check(); err != nil {
			return nil, err
		}
		node, err = puc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puc.check(); err != nil {
				return nil, err
			}
			puc.mutation = mutation
			if node, err = puc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(puc.hooks) - 1; i >= 0; i-- {
			if puc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (puc *ProfitUnsoldCreate) SaveX(ctx context.Context) *ProfitUnsold {
	v, err := puc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puc *ProfitUnsoldCreate) Exec(ctx context.Context) error {
	_, err := puc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puc *ProfitUnsoldCreate) ExecX(ctx context.Context) {
	if err := puc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puc *ProfitUnsoldCreate) defaults() error {
	if _, ok := puc.mutation.CreatedAt(); !ok {
		if profitunsold.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultCreatedAt()
		puc.mutation.SetCreatedAt(v)
	}
	if _, ok := puc.mutation.UpdatedAt(); !ok {
		if profitunsold.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultUpdatedAt()
		puc.mutation.SetUpdatedAt(v)
	}
	if _, ok := puc.mutation.DeletedAt(); !ok {
		if profitunsold.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultDeletedAt()
		puc.mutation.SetDeletedAt(v)
	}
	if _, ok := puc.mutation.GoodID(); !ok {
		if profitunsold.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultGoodID()
		puc.mutation.SetGoodID(v)
	}
	if _, ok := puc.mutation.CoinTypeID(); !ok {
		if profitunsold.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultCoinTypeID()
		puc.mutation.SetCoinTypeID(v)
	}
	if _, ok := puc.mutation.BenefitDate(); !ok {
		v := profitunsold.DefaultBenefitDate
		puc.mutation.SetBenefitDate(v)
	}
	if _, ok := puc.mutation.ID(); !ok {
		if profitunsold.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.DefaultID (forgotten import ent/runtime?)")
		}
		v := profitunsold.DefaultID()
		puc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puc *ProfitUnsoldCreate) check() error {
	if _, ok := puc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProfitUnsold.created_at"`)}
	}
	if _, ok := puc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProfitUnsold.updated_at"`)}
	}
	if _, ok := puc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "ProfitUnsold.deleted_at"`)}
	}
	return nil
}

func (puc *ProfitUnsoldCreate) sqlSave(ctx context.Context) (*ProfitUnsold, error) {
	_node, _spec := puc.createSpec()
	if err := sqlgraph.CreateNode(ctx, puc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (puc *ProfitUnsoldCreate) createSpec() (*ProfitUnsold, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfitUnsold{config: puc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profitunsold.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitunsold.FieldID,
			},
		}
	)
	_spec.OnConflict = puc.conflict
	if id, ok := puc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := puc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := puc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := puc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := puc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := puc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := puc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitunsold.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := puc.mutation.BenefitDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldBenefitDate,
		})
		_node.BenefitDate = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProfitUnsold.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfitUnsoldUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (puc *ProfitUnsoldCreate) OnConflict(opts ...sql.ConflictOption) *ProfitUnsoldUpsertOne {
	puc.conflict = opts
	return &ProfitUnsoldUpsertOne{
		create: puc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProfitUnsold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (puc *ProfitUnsoldCreate) OnConflictColumns(columns ...string) *ProfitUnsoldUpsertOne {
	puc.conflict = append(puc.conflict, sql.ConflictColumns(columns...))
	return &ProfitUnsoldUpsertOne{
		create: puc,
	}
}

type (
	// ProfitUnsoldUpsertOne is the builder for "upsert"-ing
	//  one ProfitUnsold node.
	ProfitUnsoldUpsertOne struct {
		create *ProfitUnsoldCreate
	}

	// ProfitUnsoldUpsert is the "OnConflict" setter.
	ProfitUnsoldUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ProfitUnsoldUpsert) SetCreatedAt(v uint32) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateCreatedAt() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitUnsoldUpsert) AddCreatedAt(v uint32) *ProfitUnsoldUpsert {
	u.Add(profitunsold.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitUnsoldUpsert) SetUpdatedAt(v uint32) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateUpdatedAt() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitUnsoldUpsert) AddUpdatedAt(v uint32) *ProfitUnsoldUpsert {
	u.Add(profitunsold.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitUnsoldUpsert) SetDeletedAt(v uint32) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateDeletedAt() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitUnsoldUpsert) AddDeletedAt(v uint32) *ProfitUnsoldUpsert {
	u.Add(profitunsold.FieldDeletedAt, v)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *ProfitUnsoldUpsert) SetGoodID(v uuid.UUID) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateGoodID() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitUnsoldUpsert) ClearGoodID() *ProfitUnsoldUpsert {
	u.SetNull(profitunsold.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitUnsoldUpsert) SetCoinTypeID(v uuid.UUID) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateCoinTypeID() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitUnsoldUpsert) ClearCoinTypeID() *ProfitUnsoldUpsert {
	u.SetNull(profitunsold.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *ProfitUnsoldUpsert) SetAmount(v decimal.Decimal) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateAmount() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *ProfitUnsoldUpsert) AddAmount(v decimal.Decimal) *ProfitUnsoldUpsert {
	u.Add(profitunsold.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitUnsoldUpsert) ClearAmount() *ProfitUnsoldUpsert {
	u.SetNull(profitunsold.FieldAmount)
	return u
}

// SetBenefitDate sets the "benefit_date" field.
func (u *ProfitUnsoldUpsert) SetBenefitDate(v uint32) *ProfitUnsoldUpsert {
	u.Set(profitunsold.FieldBenefitDate, v)
	return u
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *ProfitUnsoldUpsert) UpdateBenefitDate() *ProfitUnsoldUpsert {
	u.SetExcluded(profitunsold.FieldBenefitDate)
	return u
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *ProfitUnsoldUpsert) AddBenefitDate(v uint32) *ProfitUnsoldUpsert {
	u.Add(profitunsold.FieldBenefitDate, v)
	return u
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *ProfitUnsoldUpsert) ClearBenefitDate() *ProfitUnsoldUpsert {
	u.SetNull(profitunsold.FieldBenefitDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProfitUnsold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(profitunsold.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProfitUnsoldUpsertOne) UpdateNewValues() *ProfitUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(profitunsold.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ProfitUnsold.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProfitUnsoldUpsertOne) Ignore() *ProfitUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfitUnsoldUpsertOne) DoNothing() *ProfitUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfitUnsoldCreate.OnConflict
// documentation for more info.
func (u *ProfitUnsoldUpsertOne) Update(set func(*ProfitUnsoldUpsert)) *ProfitUnsoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfitUnsoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProfitUnsoldUpsertOne) SetCreatedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitUnsoldUpsertOne) AddCreatedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateCreatedAt() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitUnsoldUpsertOne) SetUpdatedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitUnsoldUpsertOne) AddUpdatedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateUpdatedAt() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitUnsoldUpsertOne) SetDeletedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitUnsoldUpsertOne) AddDeletedAt(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateDeletedAt() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ProfitUnsoldUpsertOne) SetGoodID(v uuid.UUID) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateGoodID() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitUnsoldUpsertOne) ClearGoodID() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitUnsoldUpsertOne) SetCoinTypeID(v uuid.UUID) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateCoinTypeID() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitUnsoldUpsertOne) ClearCoinTypeID() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *ProfitUnsoldUpsertOne) SetAmount(v decimal.Decimal) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ProfitUnsoldUpsertOne) AddAmount(v decimal.Decimal) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateAmount() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitUnsoldUpsertOne) ClearAmount() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *ProfitUnsoldUpsertOne) SetBenefitDate(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *ProfitUnsoldUpsertOne) AddBenefitDate(v uint32) *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertOne) UpdateBenefitDate() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *ProfitUnsoldUpsertOne) ClearBenefitDate() *ProfitUnsoldUpsertOne {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *ProfitUnsoldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfitUnsoldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfitUnsoldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProfitUnsoldUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProfitUnsoldUpsertOne.ID is not supported by MySQL driver. Use ProfitUnsoldUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProfitUnsoldUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProfitUnsoldCreateBulk is the builder for creating many ProfitUnsold entities in bulk.
type ProfitUnsoldCreateBulk struct {
	config
	builders []*ProfitUnsoldCreate
	conflict []sql.ConflictOption
}

// Save creates the ProfitUnsold entities in the database.
func (pucb *ProfitUnsoldCreateBulk) Save(ctx context.Context) ([]*ProfitUnsold, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pucb.builders))
	nodes := make([]*ProfitUnsold, len(pucb.builders))
	mutators := make([]Mutator, len(pucb.builders))
	for i := range pucb.builders {
		func(i int, root context.Context) {
			builder := pucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfitUnsoldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pucb *ProfitUnsoldCreateBulk) SaveX(ctx context.Context) []*ProfitUnsold {
	v, err := pucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pucb *ProfitUnsoldCreateBulk) Exec(ctx context.Context) error {
	_, err := pucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pucb *ProfitUnsoldCreateBulk) ExecX(ctx context.Context) {
	if err := pucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProfitUnsold.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfitUnsoldUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pucb *ProfitUnsoldCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProfitUnsoldUpsertBulk {
	pucb.conflict = opts
	return &ProfitUnsoldUpsertBulk{
		create: pucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProfitUnsold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pucb *ProfitUnsoldCreateBulk) OnConflictColumns(columns ...string) *ProfitUnsoldUpsertBulk {
	pucb.conflict = append(pucb.conflict, sql.ConflictColumns(columns...))
	return &ProfitUnsoldUpsertBulk{
		create: pucb,
	}
}

// ProfitUnsoldUpsertBulk is the builder for "upsert"-ing
// a bulk of ProfitUnsold nodes.
type ProfitUnsoldUpsertBulk struct {
	create *ProfitUnsoldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProfitUnsold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(profitunsold.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProfitUnsoldUpsertBulk) UpdateNewValues() *ProfitUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(profitunsold.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProfitUnsold.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProfitUnsoldUpsertBulk) Ignore() *ProfitUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfitUnsoldUpsertBulk) DoNothing() *ProfitUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfitUnsoldCreateBulk.OnConflict
// documentation for more info.
func (u *ProfitUnsoldUpsertBulk) Update(set func(*ProfitUnsoldUpsert)) *ProfitUnsoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfitUnsoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProfitUnsoldUpsertBulk) SetCreatedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ProfitUnsoldUpsertBulk) AddCreatedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateCreatedAt() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfitUnsoldUpsertBulk) SetUpdatedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProfitUnsoldUpsertBulk) AddUpdatedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateUpdatedAt() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProfitUnsoldUpsertBulk) SetDeletedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProfitUnsoldUpsertBulk) AddDeletedAt(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateDeletedAt() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetGoodID sets the "good_id" field.
func (u *ProfitUnsoldUpsertBulk) SetGoodID(v uuid.UUID) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateGoodID() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *ProfitUnsoldUpsertBulk) ClearGoodID() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *ProfitUnsoldUpsertBulk) SetCoinTypeID(v uuid.UUID) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateCoinTypeID() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *ProfitUnsoldUpsertBulk) ClearCoinTypeID() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *ProfitUnsoldUpsertBulk) SetAmount(v decimal.Decimal) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ProfitUnsoldUpsertBulk) AddAmount(v decimal.Decimal) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateAmount() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *ProfitUnsoldUpsertBulk) ClearAmount() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearAmount()
	})
}

// SetBenefitDate sets the "benefit_date" field.
func (u *ProfitUnsoldUpsertBulk) SetBenefitDate(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.SetBenefitDate(v)
	})
}

// AddBenefitDate adds v to the "benefit_date" field.
func (u *ProfitUnsoldUpsertBulk) AddBenefitDate(v uint32) *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.AddBenefitDate(v)
	})
}

// UpdateBenefitDate sets the "benefit_date" field to the value that was provided on create.
func (u *ProfitUnsoldUpsertBulk) UpdateBenefitDate() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.UpdateBenefitDate()
	})
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (u *ProfitUnsoldUpsertBulk) ClearBenefitDate() *ProfitUnsoldUpsertBulk {
	return u.Update(func(s *ProfitUnsoldUpsert) {
		s.ClearBenefitDate()
	})
}

// Exec executes the query.
func (u *ProfitUnsoldUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProfitUnsoldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfitUnsoldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfitUnsoldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
