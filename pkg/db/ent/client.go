// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitdetail"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitgeneral"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitunsold"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ProfitDetail is the client for interacting with the ProfitDetail builders.
	ProfitDetail *ProfitDetailClient
	// ProfitGeneral is the client for interacting with the ProfitGeneral builders.
	ProfitGeneral *ProfitGeneralClient
	// ProfitUnsold is the client for interacting with the ProfitUnsold builders.
	ProfitUnsold *ProfitUnsoldClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ProfitDetail = NewProfitDetailClient(c.config)
	c.ProfitGeneral = NewProfitGeneralClient(c.config)
	c.ProfitUnsold = NewProfitUnsoldClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		ProfitDetail:  NewProfitDetailClient(cfg),
		ProfitGeneral: NewProfitGeneralClient(cfg),
		ProfitUnsold:  NewProfitUnsoldClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		ProfitDetail:  NewProfitDetailClient(cfg),
		ProfitGeneral: NewProfitGeneralClient(cfg),
		ProfitUnsold:  NewProfitUnsoldClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ProfitDetail.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ProfitDetail.Use(hooks...)
	c.ProfitGeneral.Use(hooks...)
	c.ProfitUnsold.Use(hooks...)
}

// ProfitDetailClient is a client for the ProfitDetail schema.
type ProfitDetailClient struct {
	config
}

// NewProfitDetailClient returns a client for the ProfitDetail from the given config.
func NewProfitDetailClient(c config) *ProfitDetailClient {
	return &ProfitDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profitdetail.Hooks(f(g(h())))`.
func (c *ProfitDetailClient) Use(hooks ...Hook) {
	c.hooks.ProfitDetail = append(c.hooks.ProfitDetail, hooks...)
}

// Create returns a create builder for ProfitDetail.
func (c *ProfitDetailClient) Create() *ProfitDetailCreate {
	mutation := newProfitDetailMutation(c.config, OpCreate)
	return &ProfitDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfitDetail entities.
func (c *ProfitDetailClient) CreateBulk(builders ...*ProfitDetailCreate) *ProfitDetailCreateBulk {
	return &ProfitDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfitDetail.
func (c *ProfitDetailClient) Update() *ProfitDetailUpdate {
	mutation := newProfitDetailMutation(c.config, OpUpdate)
	return &ProfitDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfitDetailClient) UpdateOne(pd *ProfitDetail) *ProfitDetailUpdateOne {
	mutation := newProfitDetailMutation(c.config, OpUpdateOne, withProfitDetail(pd))
	return &ProfitDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfitDetailClient) UpdateOneID(id uuid.UUID) *ProfitDetailUpdateOne {
	mutation := newProfitDetailMutation(c.config, OpUpdateOne, withProfitDetailID(id))
	return &ProfitDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfitDetail.
func (c *ProfitDetailClient) Delete() *ProfitDetailDelete {
	mutation := newProfitDetailMutation(c.config, OpDelete)
	return &ProfitDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfitDetailClient) DeleteOne(pd *ProfitDetail) *ProfitDetailDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfitDetailClient) DeleteOneID(id uuid.UUID) *ProfitDetailDeleteOne {
	builder := c.Delete().Where(profitdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfitDetailDeleteOne{builder}
}

// Query returns a query builder for ProfitDetail.
func (c *ProfitDetailClient) Query() *ProfitDetailQuery {
	return &ProfitDetailQuery{
		config: c.config,
	}
}

// Get returns a ProfitDetail entity by its id.
func (c *ProfitDetailClient) Get(ctx context.Context, id uuid.UUID) (*ProfitDetail, error) {
	return c.Query().Where(profitdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfitDetailClient) GetX(ctx context.Context, id uuid.UUID) *ProfitDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProfitDetailClient) Hooks() []Hook {
	hooks := c.hooks.ProfitDetail
	return append(hooks[:len(hooks):len(hooks)], profitdetail.Hooks[:]...)
}

// ProfitGeneralClient is a client for the ProfitGeneral schema.
type ProfitGeneralClient struct {
	config
}

// NewProfitGeneralClient returns a client for the ProfitGeneral from the given config.
func NewProfitGeneralClient(c config) *ProfitGeneralClient {
	return &ProfitGeneralClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profitgeneral.Hooks(f(g(h())))`.
func (c *ProfitGeneralClient) Use(hooks ...Hook) {
	c.hooks.ProfitGeneral = append(c.hooks.ProfitGeneral, hooks...)
}

// Create returns a create builder for ProfitGeneral.
func (c *ProfitGeneralClient) Create() *ProfitGeneralCreate {
	mutation := newProfitGeneralMutation(c.config, OpCreate)
	return &ProfitGeneralCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfitGeneral entities.
func (c *ProfitGeneralClient) CreateBulk(builders ...*ProfitGeneralCreate) *ProfitGeneralCreateBulk {
	return &ProfitGeneralCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfitGeneral.
func (c *ProfitGeneralClient) Update() *ProfitGeneralUpdate {
	mutation := newProfitGeneralMutation(c.config, OpUpdate)
	return &ProfitGeneralUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfitGeneralClient) UpdateOne(pg *ProfitGeneral) *ProfitGeneralUpdateOne {
	mutation := newProfitGeneralMutation(c.config, OpUpdateOne, withProfitGeneral(pg))
	return &ProfitGeneralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfitGeneralClient) UpdateOneID(id uuid.UUID) *ProfitGeneralUpdateOne {
	mutation := newProfitGeneralMutation(c.config, OpUpdateOne, withProfitGeneralID(id))
	return &ProfitGeneralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfitGeneral.
func (c *ProfitGeneralClient) Delete() *ProfitGeneralDelete {
	mutation := newProfitGeneralMutation(c.config, OpDelete)
	return &ProfitGeneralDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfitGeneralClient) DeleteOne(pg *ProfitGeneral) *ProfitGeneralDeleteOne {
	return c.DeleteOneID(pg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfitGeneralClient) DeleteOneID(id uuid.UUID) *ProfitGeneralDeleteOne {
	builder := c.Delete().Where(profitgeneral.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfitGeneralDeleteOne{builder}
}

// Query returns a query builder for ProfitGeneral.
func (c *ProfitGeneralClient) Query() *ProfitGeneralQuery {
	return &ProfitGeneralQuery{
		config: c.config,
	}
}

// Get returns a ProfitGeneral entity by its id.
func (c *ProfitGeneralClient) Get(ctx context.Context, id uuid.UUID) (*ProfitGeneral, error) {
	return c.Query().Where(profitgeneral.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfitGeneralClient) GetX(ctx context.Context, id uuid.UUID) *ProfitGeneral {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProfitGeneralClient) Hooks() []Hook {
	hooks := c.hooks.ProfitGeneral
	return append(hooks[:len(hooks):len(hooks)], profitgeneral.Hooks[:]...)
}

// ProfitUnsoldClient is a client for the ProfitUnsold schema.
type ProfitUnsoldClient struct {
	config
}

// NewProfitUnsoldClient returns a client for the ProfitUnsold from the given config.
func NewProfitUnsoldClient(c config) *ProfitUnsoldClient {
	return &ProfitUnsoldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profitunsold.Hooks(f(g(h())))`.
func (c *ProfitUnsoldClient) Use(hooks ...Hook) {
	c.hooks.ProfitUnsold = append(c.hooks.ProfitUnsold, hooks...)
}

// Create returns a create builder for ProfitUnsold.
func (c *ProfitUnsoldClient) Create() *ProfitUnsoldCreate {
	mutation := newProfitUnsoldMutation(c.config, OpCreate)
	return &ProfitUnsoldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfitUnsold entities.
func (c *ProfitUnsoldClient) CreateBulk(builders ...*ProfitUnsoldCreate) *ProfitUnsoldCreateBulk {
	return &ProfitUnsoldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfitUnsold.
func (c *ProfitUnsoldClient) Update() *ProfitUnsoldUpdate {
	mutation := newProfitUnsoldMutation(c.config, OpUpdate)
	return &ProfitUnsoldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfitUnsoldClient) UpdateOne(pu *ProfitUnsold) *ProfitUnsoldUpdateOne {
	mutation := newProfitUnsoldMutation(c.config, OpUpdateOne, withProfitUnsold(pu))
	return &ProfitUnsoldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfitUnsoldClient) UpdateOneID(id uuid.UUID) *ProfitUnsoldUpdateOne {
	mutation := newProfitUnsoldMutation(c.config, OpUpdateOne, withProfitUnsoldID(id))
	return &ProfitUnsoldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfitUnsold.
func (c *ProfitUnsoldClient) Delete() *ProfitUnsoldDelete {
	mutation := newProfitUnsoldMutation(c.config, OpDelete)
	return &ProfitUnsoldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfitUnsoldClient) DeleteOne(pu *ProfitUnsold) *ProfitUnsoldDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfitUnsoldClient) DeleteOneID(id uuid.UUID) *ProfitUnsoldDeleteOne {
	builder := c.Delete().Where(profitunsold.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfitUnsoldDeleteOne{builder}
}

// Query returns a query builder for ProfitUnsold.
func (c *ProfitUnsoldClient) Query() *ProfitUnsoldQuery {
	return &ProfitUnsoldQuery{
		config: c.config,
	}
}

// Get returns a ProfitUnsold entity by its id.
func (c *ProfitUnsoldClient) Get(ctx context.Context, id uuid.UUID) (*ProfitUnsold, error) {
	return c.Query().Where(profitunsold.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfitUnsoldClient) GetX(ctx context.Context, id uuid.UUID) *ProfitUnsold {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProfitUnsoldClient) Hooks() []Hook {
	hooks := c.hooks.ProfitUnsold
	return append(hooks[:len(hooks):len(hooks)], profitunsold.Hooks[:]...)
}
