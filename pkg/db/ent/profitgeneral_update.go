// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitgeneral"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitGeneralUpdate is the builder for updating ProfitGeneral entities.
type ProfitGeneralUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitGeneralMutation
}

// Where appends a list predicates to the ProfitGeneralUpdate builder.
func (pgu *ProfitGeneralUpdate) Where(ps ...predicate.ProfitGeneral) *ProfitGeneralUpdate {
	pgu.mutation.Where(ps...)
	return pgu
}

// SetCreatedAt sets the "created_at" field.
func (pgu *ProfitGeneralUpdate) SetCreatedAt(u uint32) *ProfitGeneralUpdate {
	pgu.mutation.ResetCreatedAt()
	pgu.mutation.SetCreatedAt(u)
	return pgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableCreatedAt(u *uint32) *ProfitGeneralUpdate {
	if u != nil {
		pgu.SetCreatedAt(*u)
	}
	return pgu
}

// AddCreatedAt adds u to the "created_at" field.
func (pgu *ProfitGeneralUpdate) AddCreatedAt(u int32) *ProfitGeneralUpdate {
	pgu.mutation.AddCreatedAt(u)
	return pgu
}

// SetUpdatedAt sets the "updated_at" field.
func (pgu *ProfitGeneralUpdate) SetUpdatedAt(u uint32) *ProfitGeneralUpdate {
	pgu.mutation.ResetUpdatedAt()
	pgu.mutation.SetUpdatedAt(u)
	return pgu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pgu *ProfitGeneralUpdate) AddUpdatedAt(u int32) *ProfitGeneralUpdate {
	pgu.mutation.AddUpdatedAt(u)
	return pgu
}

// SetDeletedAt sets the "deleted_at" field.
func (pgu *ProfitGeneralUpdate) SetDeletedAt(u uint32) *ProfitGeneralUpdate {
	pgu.mutation.ResetDeletedAt()
	pgu.mutation.SetDeletedAt(u)
	return pgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableDeletedAt(u *uint32) *ProfitGeneralUpdate {
	if u != nil {
		pgu.SetDeletedAt(*u)
	}
	return pgu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pgu *ProfitGeneralUpdate) AddDeletedAt(u int32) *ProfitGeneralUpdate {
	pgu.mutation.AddDeletedAt(u)
	return pgu
}

// SetGoodID sets the "good_id" field.
func (pgu *ProfitGeneralUpdate) SetGoodID(u uuid.UUID) *ProfitGeneralUpdate {
	pgu.mutation.SetGoodID(u)
	return pgu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableGoodID(u *uuid.UUID) *ProfitGeneralUpdate {
	if u != nil {
		pgu.SetGoodID(*u)
	}
	return pgu
}

// ClearGoodID clears the value of the "good_id" field.
func (pgu *ProfitGeneralUpdate) ClearGoodID() *ProfitGeneralUpdate {
	pgu.mutation.ClearGoodID()
	return pgu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pgu *ProfitGeneralUpdate) SetCoinTypeID(u uuid.UUID) *ProfitGeneralUpdate {
	pgu.mutation.SetCoinTypeID(u)
	return pgu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitGeneralUpdate {
	if u != nil {
		pgu.SetCoinTypeID(*u)
	}
	return pgu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pgu *ProfitGeneralUpdate) ClearCoinTypeID() *ProfitGeneralUpdate {
	pgu.mutation.ClearCoinTypeID()
	return pgu
}

// SetAmount sets the "amount" field.
func (pgu *ProfitGeneralUpdate) SetAmount(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.ResetAmount()
	pgu.mutation.SetAmount(d)
	return pgu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableAmount(d *decimal.Decimal) *ProfitGeneralUpdate {
	if d != nil {
		pgu.SetAmount(*d)
	}
	return pgu
}

// AddAmount adds d to the "amount" field.
func (pgu *ProfitGeneralUpdate) AddAmount(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.AddAmount(d)
	return pgu
}

// ClearAmount clears the value of the "amount" field.
func (pgu *ProfitGeneralUpdate) ClearAmount() *ProfitGeneralUpdate {
	pgu.mutation.ClearAmount()
	return pgu
}

// SetToPlatform sets the "to_platform" field.
func (pgu *ProfitGeneralUpdate) SetToPlatform(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.ResetToPlatform()
	pgu.mutation.SetToPlatform(d)
	return pgu
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableToPlatform(d *decimal.Decimal) *ProfitGeneralUpdate {
	if d != nil {
		pgu.SetToPlatform(*d)
	}
	return pgu
}

// AddToPlatform adds d to the "to_platform" field.
func (pgu *ProfitGeneralUpdate) AddToPlatform(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.AddToPlatform(d)
	return pgu
}

// ClearToPlatform clears the value of the "to_platform" field.
func (pgu *ProfitGeneralUpdate) ClearToPlatform() *ProfitGeneralUpdate {
	pgu.mutation.ClearToPlatform()
	return pgu
}

// SetToUser sets the "to_user" field.
func (pgu *ProfitGeneralUpdate) SetToUser(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.ResetToUser()
	pgu.mutation.SetToUser(d)
	return pgu
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableToUser(d *decimal.Decimal) *ProfitGeneralUpdate {
	if d != nil {
		pgu.SetToUser(*d)
	}
	return pgu
}

// AddToUser adds d to the "to_user" field.
func (pgu *ProfitGeneralUpdate) AddToUser(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.AddToUser(d)
	return pgu
}

// ClearToUser clears the value of the "to_user" field.
func (pgu *ProfitGeneralUpdate) ClearToUser() *ProfitGeneralUpdate {
	pgu.mutation.ClearToUser()
	return pgu
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (pgu *ProfitGeneralUpdate) SetTransferredToPlatform(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.ResetTransferredToPlatform()
	pgu.mutation.SetTransferredToPlatform(d)
	return pgu
}

// SetNillableTransferredToPlatform sets the "transferred_to_platform" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableTransferredToPlatform(d *decimal.Decimal) *ProfitGeneralUpdate {
	if d != nil {
		pgu.SetTransferredToPlatform(*d)
	}
	return pgu
}

// AddTransferredToPlatform adds d to the "transferred_to_platform" field.
func (pgu *ProfitGeneralUpdate) AddTransferredToPlatform(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.AddTransferredToPlatform(d)
	return pgu
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (pgu *ProfitGeneralUpdate) ClearTransferredToPlatform() *ProfitGeneralUpdate {
	pgu.mutation.ClearTransferredToPlatform()
	return pgu
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (pgu *ProfitGeneralUpdate) SetTransferredToUser(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.ResetTransferredToUser()
	pgu.mutation.SetTransferredToUser(d)
	return pgu
}

// SetNillableTransferredToUser sets the "transferred_to_user" field if the given value is not nil.
func (pgu *ProfitGeneralUpdate) SetNillableTransferredToUser(d *decimal.Decimal) *ProfitGeneralUpdate {
	if d != nil {
		pgu.SetTransferredToUser(*d)
	}
	return pgu
}

// AddTransferredToUser adds d to the "transferred_to_user" field.
func (pgu *ProfitGeneralUpdate) AddTransferredToUser(d decimal.Decimal) *ProfitGeneralUpdate {
	pgu.mutation.AddTransferredToUser(d)
	return pgu
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (pgu *ProfitGeneralUpdate) ClearTransferredToUser() *ProfitGeneralUpdate {
	pgu.mutation.ClearTransferredToUser()
	return pgu
}

// Mutation returns the ProfitGeneralMutation object of the builder.
func (pgu *ProfitGeneralUpdate) Mutation() *ProfitGeneralMutation {
	return pgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgu *ProfitGeneralUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pgu.defaults(); err != nil {
		return 0, err
	}
	if len(pgu.hooks) == 0 {
		affected, err = pgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pgu.mutation = mutation
			affected, err = pgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pgu.hooks) - 1; i >= 0; i-- {
			if pgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pgu *ProfitGeneralUpdate) SaveX(ctx context.Context) int {
	affected, err := pgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgu *ProfitGeneralUpdate) Exec(ctx context.Context) error {
	_, err := pgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgu *ProfitGeneralUpdate) ExecX(ctx context.Context) {
	if err := pgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgu *ProfitGeneralUpdate) defaults() error {
	if _, ok := pgu.mutation.UpdatedAt(); !ok {
		if profitgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitgeneral.UpdateDefaultUpdatedAt()
		pgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pgu *ProfitGeneralUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitgeneral.Table,
			Columns: profitgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitgeneral.FieldID,
			},
		},
	}
	if ps := pgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := pgu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := pgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := pgu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := pgu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := pgu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := pgu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldGoodID,
		})
	}
	if pgu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitgeneral.FieldGoodID,
		})
	}
	if value, ok := pgu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldCoinTypeID,
		})
	}
	if pgu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := pgu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldAmount,
		})
	}
	if value, ok := pgu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldAmount,
		})
	}
	if pgu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldAmount,
		})
	}
	if value, ok := pgu.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if value, ok := pgu.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if pgu.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if value, ok := pgu.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToUser,
		})
	}
	if value, ok := pgu.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToUser,
		})
	}
	if pgu.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldToUser,
		})
	}
	if value, ok := pgu.mutation.TransferredToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if value, ok := pgu.mutation.AddedTransferredToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if pgu.mutation.TransferredToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if value, ok := pgu.mutation.TransferredToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	if value, ok := pgu.mutation.AddedTransferredToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	if pgu.mutation.TransferredToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfitGeneralUpdateOne is the builder for updating a single ProfitGeneral entity.
type ProfitGeneralUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitGeneralMutation
}

// SetCreatedAt sets the "created_at" field.
func (pguo *ProfitGeneralUpdateOne) SetCreatedAt(u uint32) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetCreatedAt()
	pguo.mutation.SetCreatedAt(u)
	return pguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableCreatedAt(u *uint32) *ProfitGeneralUpdateOne {
	if u != nil {
		pguo.SetCreatedAt(*u)
	}
	return pguo
}

// AddCreatedAt adds u to the "created_at" field.
func (pguo *ProfitGeneralUpdateOne) AddCreatedAt(u int32) *ProfitGeneralUpdateOne {
	pguo.mutation.AddCreatedAt(u)
	return pguo
}

// SetUpdatedAt sets the "updated_at" field.
func (pguo *ProfitGeneralUpdateOne) SetUpdatedAt(u uint32) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetUpdatedAt()
	pguo.mutation.SetUpdatedAt(u)
	return pguo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pguo *ProfitGeneralUpdateOne) AddUpdatedAt(u int32) *ProfitGeneralUpdateOne {
	pguo.mutation.AddUpdatedAt(u)
	return pguo
}

// SetDeletedAt sets the "deleted_at" field.
func (pguo *ProfitGeneralUpdateOne) SetDeletedAt(u uint32) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetDeletedAt()
	pguo.mutation.SetDeletedAt(u)
	return pguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableDeletedAt(u *uint32) *ProfitGeneralUpdateOne {
	if u != nil {
		pguo.SetDeletedAt(*u)
	}
	return pguo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pguo *ProfitGeneralUpdateOne) AddDeletedAt(u int32) *ProfitGeneralUpdateOne {
	pguo.mutation.AddDeletedAt(u)
	return pguo
}

// SetGoodID sets the "good_id" field.
func (pguo *ProfitGeneralUpdateOne) SetGoodID(u uuid.UUID) *ProfitGeneralUpdateOne {
	pguo.mutation.SetGoodID(u)
	return pguo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableGoodID(u *uuid.UUID) *ProfitGeneralUpdateOne {
	if u != nil {
		pguo.SetGoodID(*u)
	}
	return pguo
}

// ClearGoodID clears the value of the "good_id" field.
func (pguo *ProfitGeneralUpdateOne) ClearGoodID() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearGoodID()
	return pguo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pguo *ProfitGeneralUpdateOne) SetCoinTypeID(u uuid.UUID) *ProfitGeneralUpdateOne {
	pguo.mutation.SetCoinTypeID(u)
	return pguo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ProfitGeneralUpdateOne {
	if u != nil {
		pguo.SetCoinTypeID(*u)
	}
	return pguo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pguo *ProfitGeneralUpdateOne) ClearCoinTypeID() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearCoinTypeID()
	return pguo
}

// SetAmount sets the "amount" field.
func (pguo *ProfitGeneralUpdateOne) SetAmount(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetAmount()
	pguo.mutation.SetAmount(d)
	return pguo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableAmount(d *decimal.Decimal) *ProfitGeneralUpdateOne {
	if d != nil {
		pguo.SetAmount(*d)
	}
	return pguo
}

// AddAmount adds d to the "amount" field.
func (pguo *ProfitGeneralUpdateOne) AddAmount(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.AddAmount(d)
	return pguo
}

// ClearAmount clears the value of the "amount" field.
func (pguo *ProfitGeneralUpdateOne) ClearAmount() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearAmount()
	return pguo
}

// SetToPlatform sets the "to_platform" field.
func (pguo *ProfitGeneralUpdateOne) SetToPlatform(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetToPlatform()
	pguo.mutation.SetToPlatform(d)
	return pguo
}

// SetNillableToPlatform sets the "to_platform" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableToPlatform(d *decimal.Decimal) *ProfitGeneralUpdateOne {
	if d != nil {
		pguo.SetToPlatform(*d)
	}
	return pguo
}

// AddToPlatform adds d to the "to_platform" field.
func (pguo *ProfitGeneralUpdateOne) AddToPlatform(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.AddToPlatform(d)
	return pguo
}

// ClearToPlatform clears the value of the "to_platform" field.
func (pguo *ProfitGeneralUpdateOne) ClearToPlatform() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearToPlatform()
	return pguo
}

// SetToUser sets the "to_user" field.
func (pguo *ProfitGeneralUpdateOne) SetToUser(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetToUser()
	pguo.mutation.SetToUser(d)
	return pguo
}

// SetNillableToUser sets the "to_user" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableToUser(d *decimal.Decimal) *ProfitGeneralUpdateOne {
	if d != nil {
		pguo.SetToUser(*d)
	}
	return pguo
}

// AddToUser adds d to the "to_user" field.
func (pguo *ProfitGeneralUpdateOne) AddToUser(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.AddToUser(d)
	return pguo
}

// ClearToUser clears the value of the "to_user" field.
func (pguo *ProfitGeneralUpdateOne) ClearToUser() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearToUser()
	return pguo
}

// SetTransferredToPlatform sets the "transferred_to_platform" field.
func (pguo *ProfitGeneralUpdateOne) SetTransferredToPlatform(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetTransferredToPlatform()
	pguo.mutation.SetTransferredToPlatform(d)
	return pguo
}

// SetNillableTransferredToPlatform sets the "transferred_to_platform" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableTransferredToPlatform(d *decimal.Decimal) *ProfitGeneralUpdateOne {
	if d != nil {
		pguo.SetTransferredToPlatform(*d)
	}
	return pguo
}

// AddTransferredToPlatform adds d to the "transferred_to_platform" field.
func (pguo *ProfitGeneralUpdateOne) AddTransferredToPlatform(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.AddTransferredToPlatform(d)
	return pguo
}

// ClearTransferredToPlatform clears the value of the "transferred_to_platform" field.
func (pguo *ProfitGeneralUpdateOne) ClearTransferredToPlatform() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearTransferredToPlatform()
	return pguo
}

// SetTransferredToUser sets the "transferred_to_user" field.
func (pguo *ProfitGeneralUpdateOne) SetTransferredToUser(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.ResetTransferredToUser()
	pguo.mutation.SetTransferredToUser(d)
	return pguo
}

// SetNillableTransferredToUser sets the "transferred_to_user" field if the given value is not nil.
func (pguo *ProfitGeneralUpdateOne) SetNillableTransferredToUser(d *decimal.Decimal) *ProfitGeneralUpdateOne {
	if d != nil {
		pguo.SetTransferredToUser(*d)
	}
	return pguo
}

// AddTransferredToUser adds d to the "transferred_to_user" field.
func (pguo *ProfitGeneralUpdateOne) AddTransferredToUser(d decimal.Decimal) *ProfitGeneralUpdateOne {
	pguo.mutation.AddTransferredToUser(d)
	return pguo
}

// ClearTransferredToUser clears the value of the "transferred_to_user" field.
func (pguo *ProfitGeneralUpdateOne) ClearTransferredToUser() *ProfitGeneralUpdateOne {
	pguo.mutation.ClearTransferredToUser()
	return pguo
}

// Mutation returns the ProfitGeneralMutation object of the builder.
func (pguo *ProfitGeneralUpdateOne) Mutation() *ProfitGeneralMutation {
	return pguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pguo *ProfitGeneralUpdateOne) Select(field string, fields ...string) *ProfitGeneralUpdateOne {
	pguo.fields = append([]string{field}, fields...)
	return pguo
}

// Save executes the query and returns the updated ProfitGeneral entity.
func (pguo *ProfitGeneralUpdateOne) Save(ctx context.Context) (*ProfitGeneral, error) {
	var (
		err  error
		node *ProfitGeneral
	)
	if err := pguo.defaults(); err != nil {
		return nil, err
	}
	if len(pguo.hooks) == 0 {
		node, err = pguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitGeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pguo.mutation = mutation
			node, err = pguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pguo.hooks) - 1; i >= 0; i-- {
			if pguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pguo *ProfitGeneralUpdateOne) SaveX(ctx context.Context) *ProfitGeneral {
	node, err := pguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pguo *ProfitGeneralUpdateOne) Exec(ctx context.Context) error {
	_, err := pguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pguo *ProfitGeneralUpdateOne) ExecX(ctx context.Context) {
	if err := pguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pguo *ProfitGeneralUpdateOne) defaults() error {
	if _, ok := pguo.mutation.UpdatedAt(); !ok {
		if profitgeneral.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitgeneral.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitgeneral.UpdateDefaultUpdatedAt()
		pguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pguo *ProfitGeneralUpdateOne) sqlSave(ctx context.Context) (_node *ProfitGeneral, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitgeneral.Table,
			Columns: profitgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitgeneral.FieldID,
			},
		},
	}
	id, ok := pguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProfitGeneral.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profitgeneral.FieldID)
		for _, f := range fields {
			if !profitgeneral.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profitgeneral.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := pguo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldCreatedAt,
		})
	}
	if value, ok := pguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := pguo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldUpdatedAt,
		})
	}
	if value, ok := pguo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := pguo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitgeneral.FieldDeletedAt,
		})
	}
	if value, ok := pguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldGoodID,
		})
	}
	if pguo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitgeneral.FieldGoodID,
		})
	}
	if value, ok := pguo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitgeneral.FieldCoinTypeID,
		})
	}
	if pguo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitgeneral.FieldCoinTypeID,
		})
	}
	if value, ok := pguo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldAmount,
		})
	}
	if value, ok := pguo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldAmount,
		})
	}
	if pguo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldAmount,
		})
	}
	if value, ok := pguo.mutation.ToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if value, ok := pguo.mutation.AddedToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if pguo.mutation.ToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldToPlatform,
		})
	}
	if value, ok := pguo.mutation.ToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToUser,
		})
	}
	if value, ok := pguo.mutation.AddedToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldToUser,
		})
	}
	if pguo.mutation.ToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldToUser,
		})
	}
	if value, ok := pguo.mutation.TransferredToPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if value, ok := pguo.mutation.AddedTransferredToPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if pguo.mutation.TransferredToPlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldTransferredToPlatform,
		})
	}
	if value, ok := pguo.mutation.TransferredToUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	if value, ok := pguo.mutation.AddedTransferredToUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	if pguo.mutation.TransferredToUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitgeneral.FieldTransferredToUser,
		})
	}
	_node = &ProfitGeneral{config: pguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitgeneral.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
