// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitdetail"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitDetailUpdate is the builder for updating ProfitDetail entities.
type ProfitDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitDetailMutation
}

// Where appends a list predicates to the ProfitDetailUpdate builder.
func (pdu *ProfitDetailUpdate) Where(ps ...predicate.ProfitDetail) *ProfitDetailUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetCreatedAt sets the "created_at" field.
func (pdu *ProfitDetailUpdate) SetCreatedAt(u uint32) *ProfitDetailUpdate {
	pdu.mutation.ResetCreatedAt()
	pdu.mutation.SetCreatedAt(u)
	return pdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableCreatedAt(u *uint32) *ProfitDetailUpdate {
	if u != nil {
		pdu.SetCreatedAt(*u)
	}
	return pdu
}

// AddCreatedAt adds u to the "created_at" field.
func (pdu *ProfitDetailUpdate) AddCreatedAt(u int32) *ProfitDetailUpdate {
	pdu.mutation.AddCreatedAt(u)
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProfitDetailUpdate) SetUpdatedAt(u uint32) *ProfitDetailUpdate {
	pdu.mutation.ResetUpdatedAt()
	pdu.mutation.SetUpdatedAt(u)
	return pdu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pdu *ProfitDetailUpdate) AddUpdatedAt(u int32) *ProfitDetailUpdate {
	pdu.mutation.AddUpdatedAt(u)
	return pdu
}

// SetDeletedAt sets the "deleted_at" field.
func (pdu *ProfitDetailUpdate) SetDeletedAt(u uint32) *ProfitDetailUpdate {
	pdu.mutation.ResetDeletedAt()
	pdu.mutation.SetDeletedAt(u)
	return pdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableDeletedAt(u *uint32) *ProfitDetailUpdate {
	if u != nil {
		pdu.SetDeletedAt(*u)
	}
	return pdu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pdu *ProfitDetailUpdate) AddDeletedAt(u int32) *ProfitDetailUpdate {
	pdu.mutation.AddDeletedAt(u)
	return pdu
}

// SetGoodID sets the "good_id" field.
func (pdu *ProfitDetailUpdate) SetGoodID(u uuid.UUID) *ProfitDetailUpdate {
	pdu.mutation.SetGoodID(u)
	return pdu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableGoodID(u *uuid.UUID) *ProfitDetailUpdate {
	if u != nil {
		pdu.SetGoodID(*u)
	}
	return pdu
}

// ClearGoodID clears the value of the "good_id" field.
func (pdu *ProfitDetailUpdate) ClearGoodID() *ProfitDetailUpdate {
	pdu.mutation.ClearGoodID()
	return pdu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pdu *ProfitDetailUpdate) SetCoinTypeID(u uuid.UUID) *ProfitDetailUpdate {
	pdu.mutation.SetCoinTypeID(u)
	return pdu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitDetailUpdate {
	if u != nil {
		pdu.SetCoinTypeID(*u)
	}
	return pdu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pdu *ProfitDetailUpdate) ClearCoinTypeID() *ProfitDetailUpdate {
	pdu.mutation.ClearCoinTypeID()
	return pdu
}

// SetAmount sets the "amount" field.
func (pdu *ProfitDetailUpdate) SetAmount(d decimal.Decimal) *ProfitDetailUpdate {
	pdu.mutation.ResetAmount()
	pdu.mutation.SetAmount(d)
	return pdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableAmount(d *decimal.Decimal) *ProfitDetailUpdate {
	if d != nil {
		pdu.SetAmount(*d)
	}
	return pdu
}

// AddAmount adds d to the "amount" field.
func (pdu *ProfitDetailUpdate) AddAmount(d decimal.Decimal) *ProfitDetailUpdate {
	pdu.mutation.AddAmount(d)
	return pdu
}

// ClearAmount clears the value of the "amount" field.
func (pdu *ProfitDetailUpdate) ClearAmount() *ProfitDetailUpdate {
	pdu.mutation.ClearAmount()
	return pdu
}

// SetBenefitDate sets the "benefit_date" field.
func (pdu *ProfitDetailUpdate) SetBenefitDate(u uint32) *ProfitDetailUpdate {
	pdu.mutation.ResetBenefitDate()
	pdu.mutation.SetBenefitDate(u)
	return pdu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (pdu *ProfitDetailUpdate) SetNillableBenefitDate(u *uint32) *ProfitDetailUpdate {
	if u != nil {
		pdu.SetBenefitDate(*u)
	}
	return pdu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (pdu *ProfitDetailUpdate) AddBenefitDate(u int32) *ProfitDetailUpdate {
	pdu.mutation.AddBenefitDate(u)
	return pdu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (pdu *ProfitDetailUpdate) ClearBenefitDate() *ProfitDetailUpdate {
	pdu.mutation.ClearBenefitDate()
	return pdu
}

// Mutation returns the ProfitDetailMutation object of the builder.
func (pdu *ProfitDetailUpdate) Mutation() *ProfitDetailMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProfitDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pdu.defaults(); err != nil {
		return 0, err
	}
	if len(pdu.hooks) == 0 {
		affected, err = pdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pdu.mutation = mutation
			affected, err = pdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pdu.hooks) - 1; i >= 0; i-- {
			if pdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProfitDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProfitDetailUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProfitDetailUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProfitDetailUpdate) defaults() error {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		if profitdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitdetail.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pdu *ProfitDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitdetail.Table,
			Columns: profitdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitdetail.FieldID,
			},
		},
	}
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldCreatedAt,
		})
	}
	if value, ok := pdu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldCreatedAt,
		})
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pdu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pdu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldDeletedAt,
		})
	}
	if value, ok := pdu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldDeletedAt,
		})
	}
	if value, ok := pdu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitdetail.FieldGoodID,
		})
	}
	if pdu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitdetail.FieldGoodID,
		})
	}
	if value, ok := pdu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitdetail.FieldCoinTypeID,
		})
	}
	if pdu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitdetail.FieldCoinTypeID,
		})
	}
	if value, ok := pdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitdetail.FieldAmount,
		})
	}
	if value, ok := pdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitdetail.FieldAmount,
		})
	}
	if pdu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitdetail.FieldAmount,
		})
	}
	if value, ok := pdu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	if value, ok := pdu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	if pdu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfitDetailUpdateOne is the builder for updating a single ProfitDetail entity.
type ProfitDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (pduo *ProfitDetailUpdateOne) SetCreatedAt(u uint32) *ProfitDetailUpdateOne {
	pduo.mutation.ResetCreatedAt()
	pduo.mutation.SetCreatedAt(u)
	return pduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableCreatedAt(u *uint32) *ProfitDetailUpdateOne {
	if u != nil {
		pduo.SetCreatedAt(*u)
	}
	return pduo
}

// AddCreatedAt adds u to the "created_at" field.
func (pduo *ProfitDetailUpdateOne) AddCreatedAt(u int32) *ProfitDetailUpdateOne {
	pduo.mutation.AddCreatedAt(u)
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProfitDetailUpdateOne) SetUpdatedAt(u uint32) *ProfitDetailUpdateOne {
	pduo.mutation.ResetUpdatedAt()
	pduo.mutation.SetUpdatedAt(u)
	return pduo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (pduo *ProfitDetailUpdateOne) AddUpdatedAt(u int32) *ProfitDetailUpdateOne {
	pduo.mutation.AddUpdatedAt(u)
	return pduo
}

// SetDeletedAt sets the "deleted_at" field.
func (pduo *ProfitDetailUpdateOne) SetDeletedAt(u uint32) *ProfitDetailUpdateOne {
	pduo.mutation.ResetDeletedAt()
	pduo.mutation.SetDeletedAt(u)
	return pduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableDeletedAt(u *uint32) *ProfitDetailUpdateOne {
	if u != nil {
		pduo.SetDeletedAt(*u)
	}
	return pduo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (pduo *ProfitDetailUpdateOne) AddDeletedAt(u int32) *ProfitDetailUpdateOne {
	pduo.mutation.AddDeletedAt(u)
	return pduo
}

// SetGoodID sets the "good_id" field.
func (pduo *ProfitDetailUpdateOne) SetGoodID(u uuid.UUID) *ProfitDetailUpdateOne {
	pduo.mutation.SetGoodID(u)
	return pduo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableGoodID(u *uuid.UUID) *ProfitDetailUpdateOne {
	if u != nil {
		pduo.SetGoodID(*u)
	}
	return pduo
}

// ClearGoodID clears the value of the "good_id" field.
func (pduo *ProfitDetailUpdateOne) ClearGoodID() *ProfitDetailUpdateOne {
	pduo.mutation.ClearGoodID()
	return pduo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (pduo *ProfitDetailUpdateOne) SetCoinTypeID(u uuid.UUID) *ProfitDetailUpdateOne {
	pduo.mutation.SetCoinTypeID(u)
	return pduo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ProfitDetailUpdateOne {
	if u != nil {
		pduo.SetCoinTypeID(*u)
	}
	return pduo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (pduo *ProfitDetailUpdateOne) ClearCoinTypeID() *ProfitDetailUpdateOne {
	pduo.mutation.ClearCoinTypeID()
	return pduo
}

// SetAmount sets the "amount" field.
func (pduo *ProfitDetailUpdateOne) SetAmount(d decimal.Decimal) *ProfitDetailUpdateOne {
	pduo.mutation.ResetAmount()
	pduo.mutation.SetAmount(d)
	return pduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableAmount(d *decimal.Decimal) *ProfitDetailUpdateOne {
	if d != nil {
		pduo.SetAmount(*d)
	}
	return pduo
}

// AddAmount adds d to the "amount" field.
func (pduo *ProfitDetailUpdateOne) AddAmount(d decimal.Decimal) *ProfitDetailUpdateOne {
	pduo.mutation.AddAmount(d)
	return pduo
}

// ClearAmount clears the value of the "amount" field.
func (pduo *ProfitDetailUpdateOne) ClearAmount() *ProfitDetailUpdateOne {
	pduo.mutation.ClearAmount()
	return pduo
}

// SetBenefitDate sets the "benefit_date" field.
func (pduo *ProfitDetailUpdateOne) SetBenefitDate(u uint32) *ProfitDetailUpdateOne {
	pduo.mutation.ResetBenefitDate()
	pduo.mutation.SetBenefitDate(u)
	return pduo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (pduo *ProfitDetailUpdateOne) SetNillableBenefitDate(u *uint32) *ProfitDetailUpdateOne {
	if u != nil {
		pduo.SetBenefitDate(*u)
	}
	return pduo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (pduo *ProfitDetailUpdateOne) AddBenefitDate(u int32) *ProfitDetailUpdateOne {
	pduo.mutation.AddBenefitDate(u)
	return pduo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (pduo *ProfitDetailUpdateOne) ClearBenefitDate() *ProfitDetailUpdateOne {
	pduo.mutation.ClearBenefitDate()
	return pduo
}

// Mutation returns the ProfitDetailMutation object of the builder.
func (pduo *ProfitDetailUpdateOne) Mutation() *ProfitDetailMutation {
	return pduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProfitDetailUpdateOne) Select(field string, fields ...string) *ProfitDetailUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProfitDetail entity.
func (pduo *ProfitDetailUpdateOne) Save(ctx context.Context) (*ProfitDetail, error) {
	var (
		err  error
		node *ProfitDetail
	)
	if err := pduo.defaults(); err != nil {
		return nil, err
	}
	if len(pduo.hooks) == 0 {
		node, err = pduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pduo.mutation = mutation
			node, err = pduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pduo.hooks) - 1; i >= 0; i-- {
			if pduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProfitDetailUpdateOne) SaveX(ctx context.Context) *ProfitDetail {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProfitDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProfitDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProfitDetailUpdateOne) defaults() error {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		if profitdetail.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitdetail.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitdetail.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pduo *ProfitDetailUpdateOne) sqlSave(ctx context.Context) (_node *ProfitDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitdetail.Table,
			Columns: profitdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitdetail.FieldID,
			},
		},
	}
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProfitDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profitdetail.FieldID)
		for _, f := range fields {
			if !profitdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profitdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldCreatedAt,
		})
	}
	if value, ok := pduo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldCreatedAt,
		})
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldDeletedAt,
		})
	}
	if value, ok := pduo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldDeletedAt,
		})
	}
	if value, ok := pduo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitdetail.FieldGoodID,
		})
	}
	if pduo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitdetail.FieldGoodID,
		})
	}
	if value, ok := pduo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitdetail.FieldCoinTypeID,
		})
	}
	if pduo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitdetail.FieldCoinTypeID,
		})
	}
	if value, ok := pduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitdetail.FieldAmount,
		})
	}
	if value, ok := pduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitdetail.FieldAmount,
		})
	}
	if pduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitdetail.FieldAmount,
		})
	}
	if value, ok := pduo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	if value, ok := pduo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	if pduo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: profitdetail.FieldBenefitDate,
		})
	}
	_node = &ProfitDetail{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
