// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/mining-manager/pkg/db/ent/profitunsold"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ProfitUnsoldUpdate is the builder for updating ProfitUnsold entities.
type ProfitUnsoldUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitUnsoldMutation
}

// Where appends a list predicates to the ProfitUnsoldUpdate builder.
func (puu *ProfitUnsoldUpdate) Where(ps ...predicate.ProfitUnsold) *ProfitUnsoldUpdate {
	puu.mutation.Where(ps...)
	return puu
}

// SetCreatedAt sets the "created_at" field.
func (puu *ProfitUnsoldUpdate) SetCreatedAt(u uint32) *ProfitUnsoldUpdate {
	puu.mutation.ResetCreatedAt()
	puu.mutation.SetCreatedAt(u)
	return puu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableCreatedAt(u *uint32) *ProfitUnsoldUpdate {
	if u != nil {
		puu.SetCreatedAt(*u)
	}
	return puu
}

// AddCreatedAt adds u to the "created_at" field.
func (puu *ProfitUnsoldUpdate) AddCreatedAt(u int32) *ProfitUnsoldUpdate {
	puu.mutation.AddCreatedAt(u)
	return puu
}

// SetUpdatedAt sets the "updated_at" field.
func (puu *ProfitUnsoldUpdate) SetUpdatedAt(u uint32) *ProfitUnsoldUpdate {
	puu.mutation.ResetUpdatedAt()
	puu.mutation.SetUpdatedAt(u)
	return puu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puu *ProfitUnsoldUpdate) AddUpdatedAt(u int32) *ProfitUnsoldUpdate {
	puu.mutation.AddUpdatedAt(u)
	return puu
}

// SetDeletedAt sets the "deleted_at" field.
func (puu *ProfitUnsoldUpdate) SetDeletedAt(u uint32) *ProfitUnsoldUpdate {
	puu.mutation.ResetDeletedAt()
	puu.mutation.SetDeletedAt(u)
	return puu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableDeletedAt(u *uint32) *ProfitUnsoldUpdate {
	if u != nil {
		puu.SetDeletedAt(*u)
	}
	return puu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puu *ProfitUnsoldUpdate) AddDeletedAt(u int32) *ProfitUnsoldUpdate {
	puu.mutation.AddDeletedAt(u)
	return puu
}

// SetGoodID sets the "good_id" field.
func (puu *ProfitUnsoldUpdate) SetGoodID(u uuid.UUID) *ProfitUnsoldUpdate {
	puu.mutation.SetGoodID(u)
	return puu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableGoodID(u *uuid.UUID) *ProfitUnsoldUpdate {
	if u != nil {
		puu.SetGoodID(*u)
	}
	return puu
}

// ClearGoodID clears the value of the "good_id" field.
func (puu *ProfitUnsoldUpdate) ClearGoodID() *ProfitUnsoldUpdate {
	puu.mutation.ClearGoodID()
	return puu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (puu *ProfitUnsoldUpdate) SetCoinTypeID(u uuid.UUID) *ProfitUnsoldUpdate {
	puu.mutation.SetCoinTypeID(u)
	return puu
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableCoinTypeID(u *uuid.UUID) *ProfitUnsoldUpdate {
	if u != nil {
		puu.SetCoinTypeID(*u)
	}
	return puu
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (puu *ProfitUnsoldUpdate) ClearCoinTypeID() *ProfitUnsoldUpdate {
	puu.mutation.ClearCoinTypeID()
	return puu
}

// SetAmount sets the "amount" field.
func (puu *ProfitUnsoldUpdate) SetAmount(d decimal.Decimal) *ProfitUnsoldUpdate {
	puu.mutation.ResetAmount()
	puu.mutation.SetAmount(d)
	return puu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableAmount(d *decimal.Decimal) *ProfitUnsoldUpdate {
	if d != nil {
		puu.SetAmount(*d)
	}
	return puu
}

// AddAmount adds d to the "amount" field.
func (puu *ProfitUnsoldUpdate) AddAmount(d decimal.Decimal) *ProfitUnsoldUpdate {
	puu.mutation.AddAmount(d)
	return puu
}

// ClearAmount clears the value of the "amount" field.
func (puu *ProfitUnsoldUpdate) ClearAmount() *ProfitUnsoldUpdate {
	puu.mutation.ClearAmount()
	return puu
}

// SetBenefitDate sets the "benefit_date" field.
func (puu *ProfitUnsoldUpdate) SetBenefitDate(u uint32) *ProfitUnsoldUpdate {
	puu.mutation.ResetBenefitDate()
	puu.mutation.SetBenefitDate(u)
	return puu
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (puu *ProfitUnsoldUpdate) SetNillableBenefitDate(u *uint32) *ProfitUnsoldUpdate {
	if u != nil {
		puu.SetBenefitDate(*u)
	}
	return puu
}

// AddBenefitDate adds u to the "benefit_date" field.
func (puu *ProfitUnsoldUpdate) AddBenefitDate(u int32) *ProfitUnsoldUpdate {
	puu.mutation.AddBenefitDate(u)
	return puu
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (puu *ProfitUnsoldUpdate) ClearBenefitDate() *ProfitUnsoldUpdate {
	puu.mutation.ClearBenefitDate()
	return puu
}

// Mutation returns the ProfitUnsoldMutation object of the builder.
func (puu *ProfitUnsoldUpdate) Mutation() *ProfitUnsoldMutation {
	return puu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puu *ProfitUnsoldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := puu.defaults(); err != nil {
		return 0, err
	}
	if len(puu.hooks) == 0 {
		affected, err = puu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puu.mutation = mutation
			affected, err = puu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(puu.hooks) - 1; i >= 0; i-- {
			if puu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (puu *ProfitUnsoldUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *ProfitUnsoldUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *ProfitUnsoldUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puu *ProfitUnsoldUpdate) defaults() error {
	if _, ok := puu.mutation.UpdatedAt(); !ok {
		if profitunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitunsold.UpdateDefaultUpdatedAt()
		puu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puu *ProfitUnsoldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitunsold.Table,
			Columns: profitunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitunsold.FieldID,
			},
		},
	}
	if ps := puu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldCreatedAt,
		})
	}
	if value, ok := puu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldCreatedAt,
		})
	}
	if value, ok := puu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := puu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := puu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldDeletedAt,
		})
	}
	if value, ok := puu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldDeletedAt,
		})
	}
	if value, ok := puu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldGoodID,
		})
	}
	if puu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitunsold.FieldGoodID,
		})
	}
	if value, ok := puu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldCoinTypeID,
		})
	}
	if puu.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitunsold.FieldCoinTypeID,
		})
	}
	if value, ok := puu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitunsold.FieldAmount,
		})
	}
	if value, ok := puu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitunsold.FieldAmount,
		})
	}
	if puu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitunsold.FieldAmount,
		})
	}
	if value, ok := puu.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	if value, ok := puu.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	if puu.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfitUnsoldUpdateOne is the builder for updating a single ProfitUnsold entity.
type ProfitUnsoldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitUnsoldMutation
}

// SetCreatedAt sets the "created_at" field.
func (puuo *ProfitUnsoldUpdateOne) SetCreatedAt(u uint32) *ProfitUnsoldUpdateOne {
	puuo.mutation.ResetCreatedAt()
	puuo.mutation.SetCreatedAt(u)
	return puuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableCreatedAt(u *uint32) *ProfitUnsoldUpdateOne {
	if u != nil {
		puuo.SetCreatedAt(*u)
	}
	return puuo
}

// AddCreatedAt adds u to the "created_at" field.
func (puuo *ProfitUnsoldUpdateOne) AddCreatedAt(u int32) *ProfitUnsoldUpdateOne {
	puuo.mutation.AddCreatedAt(u)
	return puuo
}

// SetUpdatedAt sets the "updated_at" field.
func (puuo *ProfitUnsoldUpdateOne) SetUpdatedAt(u uint32) *ProfitUnsoldUpdateOne {
	puuo.mutation.ResetUpdatedAt()
	puuo.mutation.SetUpdatedAt(u)
	return puuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (puuo *ProfitUnsoldUpdateOne) AddUpdatedAt(u int32) *ProfitUnsoldUpdateOne {
	puuo.mutation.AddUpdatedAt(u)
	return puuo
}

// SetDeletedAt sets the "deleted_at" field.
func (puuo *ProfitUnsoldUpdateOne) SetDeletedAt(u uint32) *ProfitUnsoldUpdateOne {
	puuo.mutation.ResetDeletedAt()
	puuo.mutation.SetDeletedAt(u)
	return puuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableDeletedAt(u *uint32) *ProfitUnsoldUpdateOne {
	if u != nil {
		puuo.SetDeletedAt(*u)
	}
	return puuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (puuo *ProfitUnsoldUpdateOne) AddDeletedAt(u int32) *ProfitUnsoldUpdateOne {
	puuo.mutation.AddDeletedAt(u)
	return puuo
}

// SetGoodID sets the "good_id" field.
func (puuo *ProfitUnsoldUpdateOne) SetGoodID(u uuid.UUID) *ProfitUnsoldUpdateOne {
	puuo.mutation.SetGoodID(u)
	return puuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableGoodID(u *uuid.UUID) *ProfitUnsoldUpdateOne {
	if u != nil {
		puuo.SetGoodID(*u)
	}
	return puuo
}

// ClearGoodID clears the value of the "good_id" field.
func (puuo *ProfitUnsoldUpdateOne) ClearGoodID() *ProfitUnsoldUpdateOne {
	puuo.mutation.ClearGoodID()
	return puuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (puuo *ProfitUnsoldUpdateOne) SetCoinTypeID(u uuid.UUID) *ProfitUnsoldUpdateOne {
	puuo.mutation.SetCoinTypeID(u)
	return puuo
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableCoinTypeID(u *uuid.UUID) *ProfitUnsoldUpdateOne {
	if u != nil {
		puuo.SetCoinTypeID(*u)
	}
	return puuo
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (puuo *ProfitUnsoldUpdateOne) ClearCoinTypeID() *ProfitUnsoldUpdateOne {
	puuo.mutation.ClearCoinTypeID()
	return puuo
}

// SetAmount sets the "amount" field.
func (puuo *ProfitUnsoldUpdateOne) SetAmount(d decimal.Decimal) *ProfitUnsoldUpdateOne {
	puuo.mutation.ResetAmount()
	puuo.mutation.SetAmount(d)
	return puuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableAmount(d *decimal.Decimal) *ProfitUnsoldUpdateOne {
	if d != nil {
		puuo.SetAmount(*d)
	}
	return puuo
}

// AddAmount adds d to the "amount" field.
func (puuo *ProfitUnsoldUpdateOne) AddAmount(d decimal.Decimal) *ProfitUnsoldUpdateOne {
	puuo.mutation.AddAmount(d)
	return puuo
}

// ClearAmount clears the value of the "amount" field.
func (puuo *ProfitUnsoldUpdateOne) ClearAmount() *ProfitUnsoldUpdateOne {
	puuo.mutation.ClearAmount()
	return puuo
}

// SetBenefitDate sets the "benefit_date" field.
func (puuo *ProfitUnsoldUpdateOne) SetBenefitDate(u uint32) *ProfitUnsoldUpdateOne {
	puuo.mutation.ResetBenefitDate()
	puuo.mutation.SetBenefitDate(u)
	return puuo
}

// SetNillableBenefitDate sets the "benefit_date" field if the given value is not nil.
func (puuo *ProfitUnsoldUpdateOne) SetNillableBenefitDate(u *uint32) *ProfitUnsoldUpdateOne {
	if u != nil {
		puuo.SetBenefitDate(*u)
	}
	return puuo
}

// AddBenefitDate adds u to the "benefit_date" field.
func (puuo *ProfitUnsoldUpdateOne) AddBenefitDate(u int32) *ProfitUnsoldUpdateOne {
	puuo.mutation.AddBenefitDate(u)
	return puuo
}

// ClearBenefitDate clears the value of the "benefit_date" field.
func (puuo *ProfitUnsoldUpdateOne) ClearBenefitDate() *ProfitUnsoldUpdateOne {
	puuo.mutation.ClearBenefitDate()
	return puuo
}

// Mutation returns the ProfitUnsoldMutation object of the builder.
func (puuo *ProfitUnsoldUpdateOne) Mutation() *ProfitUnsoldMutation {
	return puuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puuo *ProfitUnsoldUpdateOne) Select(field string, fields ...string) *ProfitUnsoldUpdateOne {
	puuo.fields = append([]string{field}, fields...)
	return puuo
}

// Save executes the query and returns the updated ProfitUnsold entity.
func (puuo *ProfitUnsoldUpdateOne) Save(ctx context.Context) (*ProfitUnsold, error) {
	var (
		err  error
		node *ProfitUnsold
	)
	if err := puuo.defaults(); err != nil {
		return nil, err
	}
	if len(puuo.hooks) == 0 {
		node, err = puuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfitUnsoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puuo.mutation = mutation
			node, err = puuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puuo.hooks) - 1; i >= 0; i-- {
			if puuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *ProfitUnsoldUpdateOne) SaveX(ctx context.Context) *ProfitUnsold {
	node, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puuo *ProfitUnsoldUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *ProfitUnsoldUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puuo *ProfitUnsoldUpdateOne) defaults() error {
	if _, ok := puuo.mutation.UpdatedAt(); !ok {
		if profitunsold.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized profitunsold.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := profitunsold.UpdateDefaultUpdatedAt()
		puuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puuo *ProfitUnsoldUpdateOne) sqlSave(ctx context.Context) (_node *ProfitUnsold, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profitunsold.Table,
			Columns: profitunsold.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profitunsold.FieldID,
			},
		},
	}
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProfitUnsold.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profitunsold.FieldID)
		for _, f := range fields {
			if !profitunsold.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profitunsold.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldCreatedAt,
		})
	}
	if value, ok := puuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldCreatedAt,
		})
	}
	if value, ok := puuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := puuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldUpdatedAt,
		})
	}
	if value, ok := puuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldDeletedAt,
		})
	}
	if value, ok := puuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldDeletedAt,
		})
	}
	if value, ok := puuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldGoodID,
		})
	}
	if puuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitunsold.FieldGoodID,
		})
	}
	if value, ok := puuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: profitunsold.FieldCoinTypeID,
		})
	}
	if puuo.mutation.CoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: profitunsold.FieldCoinTypeID,
		})
	}
	if value, ok := puuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitunsold.FieldAmount,
		})
	}
	if value, ok := puuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: profitunsold.FieldAmount,
		})
	}
	if puuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: profitunsold.FieldAmount,
		})
	}
	if value, ok := puuo.mutation.BenefitDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	if value, ok := puuo.mutation.AddedBenefitDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	if puuo.mutation.BenefitDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: profitunsold.FieldBenefitDate,
		})
	}
	_node = &ProfitUnsold{config: puuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitunsold.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
